"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRedstonePrice = exports.currencies = void 0;
const tslib_1 = require("tslib");
const redstone_api_1 = (0, tslib_1.__importDefault)(require("redstone-api"));
const base64url_1 = (0, tslib_1.__importDefault)(require("base64url"));
const arweave_1 = (0, tslib_1.__importDefault)(require("arweave"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const bundlr_1 = require("../bundlr");
const matic_1 = require("./matic");
const solana_1 = require("./solana");
const arweave_2 = require("./arweave");
;
exports.currencies = {
    "arweave": bundlr_1.keys.arweave ? {
        base: ["winston", 1e12],
        account: { key: bundlr_1.keys.arweave.key, address: bundlr_1.keys.arweave.address },
        provider: "arweave.net",
        getTx: arweave_2.arweaveGetTx,
        ownerToAddress: arweave_2.arweaveOwnerToAddress,
        getId: arweave_2.arweaveGetId,
        price: () => getRedstonePrice("AR"),
        sign: arweave_2.arweaveSign,
        getSigner: arweave_2.arweaveGetSigner,
        verify: arweave_2.arweaveVerify,
        getCurrentHeight: arweave_2.arweaveGetCurrentHeight,
        getFee: arweave_2.arweaveGetFee,
        sendTx: arweave_2.arweaveSendTx,
        createTx: arweave_2.arweaveCreateTx,
        getPublicKey: arweave_2.arweaveGetPublicKey
    } : undefined,
    "matic": bundlr_1.keys.matic ? {
        base: ["wei", 1e18],
        account: { key: bundlr_1.keys.matic.key, address: bundlr_1.keys.matic.address },
        provider: "https://polygon-rpc.com",
        getTx: matic_1.maticGetTx,
        getId: (item) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
            return base64url_1.default.encode(Buffer.from(yield arweave_1.default.crypto.hash(yield item.rawSignature())));
        }),
        ownerToAddress: matic_1.maticOwnerToAddress,
        price: () => getRedstonePrice("MATIC"),
        sign: matic_1.maticSign,
        getSigner: matic_1.maticGetSigner,
        verify: matic_1.maticVerify,
        getCurrentHeight: matic_1.maticGetHeight,
        getFee: matic_1.maticGetFee,
        sendTx: matic_1.maticSendTx,
        createTx: matic_1.maticCreateTx,
        getPublicKey: matic_1.maticGetPublicKey
    } : undefined,
    "solana": bundlr_1.keys.solana ? {
        base: ["lamports", 1000000000],
        account: { key: bundlr_1.keys.solana.key, address: bundlr_1.keys.solana.address },
        provider: "mainnet-beta",
        getTx: solana_1.solanaGetTx,
        getId: (item) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
            return base64url_1.default.encode(Buffer.from(yield arweave_1.default.crypto.hash(yield item.rawSignature())));
        }),
        ownerToAddress: solana_1.solanaOwnerToAddress,
        price: () => getRedstonePrice("SOL"),
        sign: solana_1.solanaSign,
        getSigner: solana_1.solanaGetSigner,
        verify: solana_1.solanaVerify,
        getCurrentHeight: solana_1.solanaGetCurrentHeight,
        getFee: solana_1.solanaGetFee,
        sendTx: solana_1.solanaSendTx,
        createTx: solana_1.solanaCreateTx,
        getPublicKey: solana_1.solanaGetPublicKey,
    } : undefined,
};
function getRedstonePrice(currency) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        return (yield redstone_api_1.default.getPrice(currency)).value;
    });
}
exports.getRedstonePrice = getRedstonePrice;
//# sourceMappingURL=index.js.map