"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const arbundles_1 = require("arbundles");
const fs_1 = require("fs");
const mime_types_1 = (0, tslib_1.__importDefault)(require("mime-types"));
class Uploader {
    constructor(api, currency, currencyConfig) {
        this.api = api;
        this.currency = currency;
        this.currencyConfig = currencyConfig;
    }
    /**
     * Uploads a file to the bundler
     * @param path to the file to be uploaded
     * @returns the response from the bundler
     */
    uploadFile(path) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (!fs_1.promises.stat(path).then(_ => true).catch(_ => false)) {
                throw new Error(`Unable to access path: ${path}`);
            }
            //const signer = await this.currencyConfig.getSigner();
            const mimeType = mime_types_1.default.lookup(path);
            const tags = [{ name: "Content-Type", value: (mimeType ? mimeType : "application/octet-stream") }];
            const data = (0, fs_1.readFileSync)(path);
            return yield this.upload(data, tags);
        });
    }
    /**
     * Uploads data to the bundler
     * @param data
     * @param tags
     * @returns the response from the bundler
     */
    upload(data, tags) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            // try {
            const signer = yield this.currencyConfig.getSigner();
            const dataItem = (0, arbundles_1.createData)(data, signer, { tags });
            yield dataItem.sign(signer);
            return this.dataItemUploader(dataItem);
        });
    }
    /**
     * Assumes the dataItem needs no further preperation, and directly posts it to the bundlr node.
     * @param dataItem
     * @returns
     */
    dataItemUploader(dataItem) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const { protocol, host, port } = this.api.getConfig();
            const res = yield this.api.post(`${protocol}://${host}:${port}/tx/${this.currency}`, dataItem.getRaw(), {
                headers: { "Content-Type": "application/octet-stream", },
                timeout: 100000,
                maxBodyLength: Infinity,
                validateStatus: (status) => (status > 200 && status < 300) || status !== 402
            });
            if (res.status === 402) {
                throw new Error("Not enough funds to send data");
            }
            return res;
        });
    }
}
exports.default = Uploader;
//# sourceMappingURL=upload.js.map