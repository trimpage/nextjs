import { findGatewayToken, State } from '@identity.com/solana-gateway-ts';
import React, { useEffect, useRef, useState } from 'react';
import badgeSupportedGatekeeperNetworks from './constants';
import { clusterEndpoint } from '../config';
import { getSolanaConnection } from '../connection';
import BadgeSvg from './Badge.svg';
// Used to avoid making multiple blockchain calls when rerendering
function usePrevious(value) {
    const ref = useRef();
    useEffect(() => {
        ref.current = value;
    }, [value]); // Only re-run if value changes
    // Return previous value (happens before update in useEffect above)
    return ref.current;
}
const Badge = ({ connection, gatekeeperNetwork, publicKey, clusterName = 'mainnet-beta' }) => {
    const [token, setToken] = useState();
    const prevGKN = usePrevious(gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58());
    const prevPubkey = usePrevious(publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58());
    const prevClusterName = usePrevious(clusterName);
    useEffect(() => {
        // only make another call if anything changes, as we cannot
        // rely on useEffect to protect us from this
        if ((gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58()) !== prevGKN ||
            (publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58()) !== prevPubkey ||
            clusterName !== prevClusterName) {
            const clusterUrl = clusterEndpoint(clusterName);
            const normalizedConnection = connection || getSolanaConnection(clusterUrl);
            // only set the GT if one was found
            findGatewayToken(normalizedConnection, publicKey, gatekeeperNetwork).then((gt) => setToken(gt || undefined));
        }
    }, [gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58(), publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58(), clusterName, connection]);
    if (!badgeSupportedGatekeeperNetworks.includes(gatekeeperNetwork.toBase58())) {
        return React.createElement(React.Fragment, null);
    }
    return (token === null || token === void 0 ? void 0 : token.state) === State.ACTIVE ? (React.createElement("a", { href: "https://www.civic.com", target: "_blank", rel: "noreferrer", "data-testid": "badgeLink" },
        React.createElement(BadgeSvg, null))) : (React.createElement(React.Fragment, null));
};
export default Badge;
