"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const bignumber_js_1 = (0, tslib_1.__importDefault)(require("bignumber.js"));
class Utils {
    constructor(api, currency, currencyConfig, config) {
        this.api = api;
        this.config = config;
        this.currency = currency;
        this.currencyConfig = currencyConfig;
    }
    ;
    /**
     * Throws an error if the provided axios reponse has a status code != 200
     * @param res an axios response
     * @returns nothing if the status code is 200
     */
    static checkAndThrow(res, context) {
        if ((res === null || res === void 0 ? void 0 : res.status) && res.status != 200) {
            throw new Error(`HTTP Error: ${context}: ${res.status} ${JSON.stringify(res.data)}`);
        }
        return;
    }
    /**
     * Gets the nonce used for withdrawl request validation from the bundler
     * @returns nonce for the current user
     */
    getNonce() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const res = yield this.api.get(`/account/withdrawals/${this.currency}?address=${this.config.address}`);
            Utils.checkAndThrow(res, "Getting withdrawal nonce");
            return (res).data;
        });
    }
    /**
     * Gets the balance on the current bundler for the specified user
     * @param address the user's address to query
     * @returns the balance in winston
     */
    getBalance(address) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const res = yield this.api.get(`/account/balance/${this.currency}?address=${address}`);
            Utils.checkAndThrow(res, "Getting balance");
            return res.data.balance;
        });
    }
    /**
     * Queries the bundler to get it's address for a specific currency
     * @returns the bundler's address
     */
    getBundlerAddress(currency) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const res = yield this.api.get("/info");
            Utils.checkAndThrow(res, "Getting Bundler address");
            const address = res.data.addresses[currency];
            if (!address) {
                throw new Error(`Specified bundler does not support currency ${currency}`);
            }
            return address;
        });
    }
    getStorageCost(currency, bytes) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const res = yield this.api.get(`/price/${currency}/${bytes}`);
            Utils.checkAndThrow(res, "Getting storage cost");
            return new bignumber_js_1.default((res).data);
        });
    }
}
exports.default = Utils;
//# sourceMappingURL=utils.js.map