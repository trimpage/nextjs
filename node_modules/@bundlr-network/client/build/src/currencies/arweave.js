"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.arweaveGetPublicKey = exports.arweaveCreateTx = exports.arweaveSendTx = exports.arweaveGetFee = exports.arweaveGetCurrentHeight = exports.arweaveVerify = exports.arweaveGetSigner = exports.arweaveSign = exports.arweaveGetId = exports.arweaveOwnerToAddress = exports.arweaveGetTx = void 0;
const tslib_1 = require("tslib");
const arweave_1 = (0, tslib_1.__importDefault)(require("arweave"));
//import { arweave } from "../bundlr";
const crypto_1 = (0, tslib_1.__importDefault)(require("crypto"));
const bignumber_js_1 = (0, tslib_1.__importDefault)(require("bignumber.js"));
const base64url_1 = (0, tslib_1.__importDefault)(require("base64url"));
const index_1 = require("./index");
const signing_1 = require("arbundles/build/signing");
function createArweave() {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const gateway = index_1.currencies["arweave"].provider;
        return arweave_1.default.init({ host: gateway, protocol: "https", port: 443 });
    });
}
function arweaveGetTx(txId) {
    var _a, _b, _c;
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const arweave = yield createArweave();
        const txs = yield arweave.transactions.getStatus(txId);
        let tx;
        if (txs.status == 200) {
            tx = yield arweave.transactions.get(txId);
        }
        const confirmed = (txs.status !== 202 && ((_a = txs.confirmed) === null || _a === void 0 ? void 0 : _a.number_of_confirmations) >= 20);
        let owner;
        if (tx === null || tx === void 0 ? void 0 : tx.owner) {
            owner = arweaveOwnerToAddress(tx.owner);
        }
        return {
            from: owner !== null && owner !== void 0 ? owner : undefined,
            to: (_b = tx === null || tx === void 0 ? void 0 : tx.target) !== null && _b !== void 0 ? _b : undefined,
            amount: new bignumber_js_1.default((_c = tx === null || tx === void 0 ? void 0 : tx.quantity) !== null && _c !== void 0 ? _c : 0),
            pending: (txs.status == 202),
            confirmed
        };
    });
}
exports.arweaveGetTx = arweaveGetTx;
function arweaveOwnerToAddress(owner) {
    return arweave_1.default.utils.bufferTob64Url(crypto_1.default
        .createHash("sha256")
        .update((arweave_1.default.utils.b64UrlToBuffer((Buffer.isBuffer(owner) ? (0, base64url_1.default)(owner) : owner))))
        .digest());
}
exports.arweaveOwnerToAddress = arweaveOwnerToAddress;
function arweaveGetId(item) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        return base64url_1.default.encode(Buffer.from(yield arweave_1.default.crypto.hash(yield item.rawSignature())));
    });
}
exports.arweaveGetId = arweaveGetId;
function arweaveSign(data) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        return arweave_1.default.crypto.sign(index_1.currencies["arweave"].account.key, data);
    });
}
exports.arweaveSign = arweaveSign;
function arweaveGetSigner() {
    return new signing_1.ArweaveSigner(index_1.currencies["arweave"].account.key);
}
exports.arweaveGetSigner = arweaveGetSigner;
function arweaveVerify(pub, data, sig) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        return arweave_1.default.crypto.verify(pub, data, sig);
    });
}
exports.arweaveVerify = arweaveVerify;
function arweaveGetCurrentHeight() {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const arweave = yield createArweave();
        return arweave.network.getInfo().then(r => new bignumber_js_1.default(r.height));
    });
}
exports.arweaveGetCurrentHeight = arweaveGetCurrentHeight;
function arweaveGetFee(amount, to) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const arweave = yield createArweave();
        return new bignumber_js_1.default(parseInt(yield arweave.transactions.getPrice(amount, to)));
    });
}
exports.arweaveGetFee = arweaveGetFee;
function arweaveSendTx(tx) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const arweave = yield createArweave();
        return yield arweave.transactions.post(tx);
    });
}
exports.arweaveSendTx = arweaveSendTx;
function arweaveCreateTx(amount, to, fee) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const arweave = yield createArweave();
        const key = index_1.currencies["arweave"].account.key;
        const tx = yield arweave.createTransaction({ quantity: amount.toString(), reward: fee, target: to }, key);
        yield arweave.transactions.sign(tx, key);
        return { txId: tx.id, tx };
    });
}
exports.arweaveCreateTx = arweaveCreateTx;
function arweaveGetPublicKey() {
    return index_1.currencies["arweave"].account.key.n;
}
exports.arweaveGetPublicKey = arweaveGetPublicKey;
//# sourceMappingURL=arweave.js.map