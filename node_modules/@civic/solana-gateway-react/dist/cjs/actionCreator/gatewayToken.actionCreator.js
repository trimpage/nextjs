"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GatewayTokenActionCreatorImplementation = void 0;
const solana_gateway_ts_1 = require("@identity.com/solana-gateway-ts");
const logger_1 = __importDefault(require("../logger"));
const utils_1 = require("./utils");
const pollForActiveOnChainToken = async (chainImplementation) => {
    return (0, utils_1.pollUntilConditionMet)(chainImplementation.findGatewayToken, (onChainToken) => {
        if (!onChainToken)
            return false; // keep polling
        if (onChainToken.state === solana_gateway_ts_1.State.ACTIVE)
            return true;
        throw new Error('Token found but not ACTIVE');
    }, 2000, // wait 2 seconds between retries
    20 // poll 20 times
    );
};
const GatewayTokenActionCreatorImplementation = ({ wallet, chainImplementation, gatekeeperClient, dispatch, }) => {
    const logDebug = (message, obj = null) => logger_1.default.debug(`[useChain] ${message}`, obj);
    const logError = (message, obj = null) => logger_1.default.error(`[useChain] ${message}`, obj);
    const isTokenCreated = (code) => code === 200;
    const isTokenPending = (code) => code === 202 || code === 404;
    const isFailure = (code) => !isTokenPending(code) && code >= 400;
    const waitForGatewayToken = async () => {
        // poll the gatekeeper until we have a status for a created record
        // if we don't get a created token, then we consider it a failure
        const code = await gatekeeperClient().pollGatekeeperStatus(wallet.publicKey);
        if (isTokenCreated(code)) {
            const token = await pollForActiveOnChainToken(chainImplementation);
            logDebug('Result from pollForActiveOnChainToken', token);
            if (!token) {
                logError(`Token not found onChain: ${code}`);
                throw new Error(`Token not found onChain: ${code}`);
            }
            dispatch({ type: 'tokenChange', token });
            dispatch({ type: 'civicPass_check_token_status', token });
            return;
        }
        // retries have been exhausted and we still don't have a token
        // or the gatekeeper threw an error during issuance attempt
        if (isTokenPending(code) || isFailure(code)) {
            logError('Failed to find Gateway token', code);
            dispatch({ type: 'gatekeeperError' });
            return;
        }
        throw new Error(`setTokenIfCreatedStatus error: ${code}`);
    };
    return { waitForGatewayToken };
};
exports.GatewayTokenActionCreatorImplementation = GatewayTokenActionCreatorImplementation;
