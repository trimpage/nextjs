[{"/Users/arianowji/candy/pages/_app.tsx":"1","/Users/arianowji/candy/pages/_document.js":"2","/Users/arianowji/candy/pages/index.tsx":"3","/Users/arianowji/candy/components/Home.tsx":"4","/Users/arianowji/candy/components/Layout/Header.js":"5","/Users/arianowji/candy/components/MintButton.tsx":"6","/Users/arianowji/candy/components/PhaseHeader.tsx":"7","/Users/arianowji/candy/components/ReactCountdown.tsx":"8","/Users/arianowji/candy/components/WalletConnection/WalletConnectionProvider.tsx":"9","/Users/arianowji/candy/components/countdown.tsx":"10"},{"size":702,"mtime":1640602340445,"results":"11","hashOfConfig":"12"},{"size":737,"mtime":1640602340445,"results":"13","hashOfConfig":"12"},{"size":1520,"mtime":1640602340445,"results":"14","hashOfConfig":"12"},{"size":9320,"mtime":1640602340442,"results":"15","hashOfConfig":"12"},{"size":3454,"mtime":1640654207944,"results":"16","hashOfConfig":"12"},{"size":1753,"mtime":1640602340442,"results":"17","hashOfConfig":"12"},{"size":4264,"mtime":1640602340442,"results":"18","hashOfConfig":"12"},{"size":1686,"mtime":1640602340443,"results":"19","hashOfConfig":"12"},{"size":1396,"mtime":1640602340443,"results":"20","hashOfConfig":"12"},{"size":3220,"mtime":1640602340443,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11qq48f",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/arianowji/candy/pages/_app.tsx",[],"/Users/arianowji/candy/pages/_document.js",[],"/Users/arianowji/candy/pages/index.tsx",[],"/Users/arianowji/candy/components/Home.tsx",["43","44"],"import { useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport { toDate } from \"../helpers/utils\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Countdown from \"react-countdown\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\n// import useWalletBalance from \"../hooks/useWalletBalance\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport useSplToken from \"../hooks/useSplToken\";\nimport ReactCountdown from \"./ReactCountdown\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n} from \"../helpers/candy-machine\";\n\nimport { AlertState } from \"../helpers/utils\";\nimport { MintButton } from \"./MintButton\";\nimport { PhaseHeader } from \"./PhaseHeader\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\n\nconst MintContainer = styled.div``; // add your styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [yourSOLBalance, setYourSOLBalance] = useState<number | null>(null);\n  const rpcUrl = props.rpcHost;\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n  const wallet = useWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [isLoading, isSPLExists] = useSplToken();\n  // const [refresh, setRefresh] = useState(false);\n  // const balance = useWalletBalance();\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      document.getElementById(\"#identity\")?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        const mintTxId = (\n          await mintOneToken(candyMachine, wallet.publicKey)\n        )[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            \"singleGossip\",\n            true\n          );\n        }\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      console.log(\"err \", error);\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction Timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (!anchorWallet) {\n        return;\n      }\n\n      const balance = await props.connection.getBalance(anchorWallet.publicKey);\n      setYourSOLBalance(balance);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            props.connection\n          );\n          setCandyMachine(cndy);\n        } catch (e) {\n          console.log(\"Problem getting candy machine state\");\n          console.log(e);\n        }\n      } else {\n        console.log(\"No candy machine detected in configuration.\");\n      }\n    })();\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const renderer = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: {\n    days: any;\n    hours: any;\n    minutes: any;\n    seconds: any;\n    completed: any;\n  }) => {\n    if (completed) {\n      const disabled =\n        \"cursor-not-allowed font-monstmedium text-4xl w-2/3 mx-auto mt-6 h-20 rounded-lg text-white\";\n      const notDisabled =\n        \"font-monstmedium text-4xl w-2/3 mx-auto mt-6 h-20 rounded-lg bg-pink-500 text-white\";\n      return (\n        <div className=\"flex flex-col mt-32 justify-center\">\n          <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\n            <Paper\n              style={{\n                padding: 24,\n                backgroundColor: \"#151A1F\",\n                borderRadius: 6,\n              }}\n            >\n              <div className=\"\">\n                <img\n                  src=\"/images/.png\"\n                  className=\"mb-6 border-2 rounded border-gray-700\"\n                />\n              </div>\n              <Grid container justifyContent=\"center\" direction=\"column\">\n                <PhaseHeader\n                  candyMachine={candyMachine}\n                  rpcUrl={rpcUrl}\n                  whiteList={isSPLExists}\n                />\n\n                <>\n                  <MintContainer>\n                    {candyMachine?.state.isActive &&\n                    candyMachine?.state.gatekeeper &&\n                    wallet.publicKey &&\n                    wallet.signTransaction ? (\n                      <GatewayProvider\n                        wallet={{\n                          publicKey:\n                            wallet.publicKey ||\n                            new PublicKey(CANDY_MACHINE_PROGRAM),\n                          //@ts-ignore\n                          signTransaction: wallet.signTransaction,\n                        }}\n                        // // Replace with following when added\n                        // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n                        gatekeeperNetwork={\n                          candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                        } // This is the ignite (captcha) network\n                        /// Don't need this for mainnet\n                        clusterUrl={rpcUrl}\n                        options={{ autoShowModal: false }}\n                      >\n                        <MintButton\n                          candyMachine={candyMachine}\n                          isMinting={isMinting}\n                          onMint={onMint}\n                        />\n                      </GatewayProvider>\n                    ) : (\n                      <MintButton\n                        candyMachine={candyMachine}\n                        isMinting={isMinting}\n                        onMint={onMint}\n                      />\n                    )}\n                  </MintContainer>\n                </>\n\n                {/* {wallet.connected && <p>Balance: {balance || 0}SOL</p>} */}\n              </Grid>\n            </Paper>\n          </Container>\n        </div>\n      );\n    } else {\n      return (\n        <ReactCountdown\n          days={days}\n          minutes={minutes}\n          hours={hours}\n          seconds={seconds}\n        />\n      );\n    }\n  };\n\n  const candyMachineGoLive = toDate(candyMachine?.state.goLiveDate)?.getTime();\n\n  return (\n    <div className=\"bg-container\">\n      <Container style={{ marginTop: 100 }}>\n        {candyMachineGoLive && wallet.connected && (\n          <Countdown\n            date={isSPLExists ? 1640199600000 : candyMachineGoLive}\n            renderer={renderer}\n          />\n        )}\n        {!candyMachine && wallet.connected && (\n          <div className=\"text-white text-center mt-36 mb-6 text-2xl\">\n            Loading\n          </div>\n        )}\n        {!wallet.connected && (\n          <div className=\"text-white font-sans text-center text-4xl mt-36\">\n            Connect Wallet <br /> To Initiate Countdown\n          </div>\n        )}\n        <Snackbar\n          open={alertState.open}\n          autoHideDuration={6000}\n          onClose={() => setAlertState({ ...alertState, open: false })}\n        >\n          <Alert\n            onClose={() => setAlertState({ ...alertState, open: false })}\n            severity={alertState.severity}\n          >\n            {alertState.message}\n          </Alert>\n        </Snackbar>\n      </Container>\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/arianowji/candy/components/Layout/Header.js",[],"/Users/arianowji/candy/components/MintButton.tsx",[],"/Users/arianowji/candy/components/PhaseHeader.tsx",[],"/Users/arianowji/candy/components/ReactCountdown.tsx",[],"/Users/arianowji/candy/components/WalletConnection/WalletConnectionProvider.tsx",[],"/Users/arianowji/candy/components/countdown.tsx",[],{"ruleId":"45","severity":1,"message":"46","line":194,"column":17,"nodeType":"47","endLine":197,"endColumn":19},{"ruleId":"48","severity":1,"message":"49","line":194,"column":17,"nodeType":"47","endLine":197,"endColumn":19},"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See https://nextjs.org/docs/messages/no-img-element.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]