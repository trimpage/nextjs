import Api, { ApiConfig } from "arweave/node/lib/api";
import { JWKInterface } from "arweave/node/lib/wallet";
import Utils from "./utils";
import Uploader from "./upload";
import Fund from "./fund";
import { AxiosResponse } from "axios";
import { Currency } from "./currencies";
import { DataItemCreateOptions } from "arbundles";
import BundlrTransaction from "./transaction";
export declare let arweave: any;
export declare const keys: {
    [key: string]: {
        key: string;
        address: string;
    };
};
export interface Config {
    wallet: JWKInterface;
    address?: string;
    APIConfig: ApiConfig;
    gatewayConfig: ApiConfig;
}
export default class Bundlr {
    api: Api;
    utils: Utils;
    uploader: Uploader;
    funder: Fund;
    address: any;
    currency: any;
    wallet: any;
    currencyConfig: Currency;
    /**
     * Constructs a new Bundlr instance, as well as supporting subclasses
     * @param url - URL to the bundler
     * @param wallet - JWK in JSON
     */
    constructor(url: string, currency: string, wallet?: any);
    withdrawBalance(amount: any): Promise<AxiosResponse<any>>;
    /**
     * Gets the balance for the loaded wallet
     * @returns balance (in winston)
     */
    getLoadedBalance(): Promise<number>;
    /**
     * Gets the balance for the specified address
     * @param address address to query for
     * @returns the balance (in winston)
     */
    getBalance(address: string): Promise<number>;
    /**
     * Sends amount winston to the specified bundler
     * @param amount amount to send in winston
     * @returns Arweave transaction
     */
    fund(amount: number, multiplier?: number): Promise<any>;
    /**
     * Upload a file at the specified path to the bundler
     * @param path path to the file to upload
     * @returns bundler response
     */
    uploadFile(path: string): Promise<AxiosResponse<any>>;
    /**
     * Create a new BundlrTransactions (flex currency arbundles dataItem)
     * @param data
     * @param opts - dataItemCreateOptions
     * @returns - a new BundlrTransaction instance
     */
    createTransaction(data: string | Uint8Array, opts?: DataItemCreateOptions): BundlrTransaction;
}
