"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteSignWindowEventEmitter = exports.CivicSignEventTypeRequest = exports.CivicSignEventTypeResponse = void 0;
// TODO: Duplicate types in CivicSign
// Move to a central repo or use TS paths
var CivicSignEventTypeResponse;
(function (CivicSignEventTypeResponse) {
    CivicSignEventTypeResponse["RESPONSE_PUBLIC_KEY"] = "RESPONSE_PUBLIC_KEY";
    CivicSignEventTypeResponse["RESPONSE_DID"] = "RESPONSE_DID";
    CivicSignEventTypeResponse["RESPONSE_SIGNED_PROOF"] = "RESPONSE_SIGNED_PROOF";
})(CivicSignEventTypeResponse = exports.CivicSignEventTypeResponse || (exports.CivicSignEventTypeResponse = {}));
var CivicSignEventTypeRequest;
(function (CivicSignEventTypeRequest) {
    CivicSignEventTypeRequest["REQUEST_PUBLIC_KEY"] = "REQUEST_PUBLIC_KEY";
    CivicSignEventTypeRequest["REQUEST_DID"] = "REQUEST_DID";
    CivicSignEventTypeRequest["REQUEST_SIGNED_PROOF"] = "REQUEST_SIGNED_PROOF";
})(CivicSignEventTypeRequest = exports.CivicSignEventTypeRequest || (exports.CivicSignEventTypeRequest = {}));
class RemoteSignWindowEventEmitter {
    constructor(targetWindow) {
        this.targetWindow = targetWindow;
    }
    sendPublicKey(publicKey) {
        this.emit({
            event: CivicSignEventTypeResponse.RESPONSE_PUBLIC_KEY,
            data: publicKey,
        });
    }
    sendDid(did) {
        this.emit({
            event: CivicSignEventTypeResponse.RESPONSE_DID,
            data: did,
        });
    }
    sendSignedProof(proof) {
        this.emit({
            event: CivicSignEventTypeResponse.RESPONSE_SIGNED_PROOF,
            data: proof,
        });
    }
    emit(event) {
        this.targetWindow.postMessage(event, '*');
    }
}
exports.RemoteSignWindowEventEmitter = RemoteSignWindowEventEmitter;
