{"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/index.ts":{"path":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/index.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":89}},"4":{"start":{"line":4,"column":71},"end":{"line":4,"column":83}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"6":{"start":{"line":6,"column":26},"end":{"line":6,"column":33}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":17}},"8":{"start":{"line":9,"column":19},"end":{"line":11,"column":1}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":126}},"10":{"start":{"line":10,"column":21},"end":{"line":10,"column":126}},"11":{"start":{"line":10,"column":95},"end":{"line":10,"column":126}},"12":{"start":{"line":12,"column":0},"end":{"line":12,"column":62}},"13":{"start":{"line":13,"column":0},"end":{"line":13,"column":52}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":45}},"15":{"start":{"line":15,"column":0},"end":{"line":15,"column":57}},"16":{"start":{"line":16,"column":0},"end":{"line":16,"column":42}},"17":{"start":{"line":17,"column":0},"end":{"line":17,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":5,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":58},"end":{"line":4,"column":59}},"loc":{"start":{"line":4,"column":69},"end":{"line":4,"column":85}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":6},"end":{"line":5,"column":7}},"loc":{"start":{"line":5,"column":28},"end":{"line":8,"column":1}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":50},"end":{"line":9,"column":51}},"loc":{"start":{"line":9,"column":71},"end":{"line":11,"column":1}},"line":9}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":8,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":8,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":5,"column":1}},{"start":{"line":5,"column":6},"end":{"line":8,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},{"start":{"line":6,"column":4},"end":{"line":6,"column":33}}],"line":6},"4":{"loc":{"start":{"line":9,"column":19},"end":{"line":11,"column":1}},"type":"binary-expr","locations":[{"start":{"line":9,"column":20},"end":{"line":9,"column":24}},{"start":{"line":9,"column":28},"end":{"line":9,"column":45}},{"start":{"line":9,"column":50},"end":{"line":11,"column":1}}],"line":9},"5":{"loc":{"start":{"line":10,"column":21},"end":{"line":10,"column":126}},"type":"if","locations":[{"start":{"line":10,"column":21},"end":{"line":10,"column":126}},{"start":{"line":10,"column":21},"end":{"line":10,"column":126}}],"line":10},"6":{"loc":{"start":{"line":10,"column":25},"end":{"line":10,"column":93}},"type":"binary-expr","locations":[{"start":{"line":10,"column":25},"end":{"line":10,"column":40}},{"start":{"line":10,"column":44},"end":{"line":10,"column":93}}],"line":10}},"s":{"0":1,"1":35,"2":35,"3":35,"4":22,"5":0,"6":0,"7":0,"8":1,"9":5,"10":35,"11":35,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1},"f":{"0":35,"1":22,"2":0,"3":5},"b":{"0":[1,1,1],"1":[1,0],"2":[35,0],"3":[0,0],"4":[1,1,1],"5":[35,0],"6":[35,35]},"inputSourceMap":{"version":3,"file":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/index.ts","sources":["/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,oDAAkC;AAClC,6CAA2B;AAC3B,yDAAuC;AACvC,0CAAwB;AACxB,kDAAgC","sourcesContent":["export * from \"./lib/instruction\";\nexport * from \"./lib/util\";\nexport * from \"./lib/GatewayTokenData\";\nexport * from \"./types\";\nexport * from \"./lib/constants\";\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"37da5b3e684a16305df72dc02fe35496db336b57","contentHash":"1791bfb51720e2202ba338189c33e78db927835277501c5a42143d2ee818cbc6"},"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/instruction.ts":{"path":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/instruction.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":186}},"2":{"start":{"line":4,"column":22},"end":{"line":4,"column":46}},"3":{"start":{"line":5,"column":20},"end":{"line":5,"column":42}},"4":{"start":{"line":6,"column":18},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":27},"end":{"line":7,"column":56}},"6":{"start":{"line":25,"column":8},"end":{"line":27,"column":11}},"7":{"start":{"line":30,"column":8},"end":{"line":32,"column":11}},"8":{"start":{"line":35,"column":8},"end":{"line":39,"column":11}},"9":{"start":{"line":42,"column":8},"end":{"line":46,"column":11}},"10":{"start":{"line":49,"column":8},"end":{"line":53,"column":11}},"11":{"start":{"line":56,"column":8},"end":{"line":60,"column":11}},"12":{"start":{"line":63,"column":8},"end":{"line":65,"column":11}},"13":{"start":{"line":68,"column":0},"end":{"line":68,"column":48}},"14":{"start":{"line":79,"column":17},"end":{"line":86,"column":5}},"15":{"start":{"line":87,"column":17},"end":{"line":87,"column":60}},"16":{"start":{"line":88,"column":4},"end":{"line":92,"column":7}},"17":{"start":{"line":94,"column":0},"end":{"line":94,"column":38}},"18":{"start":{"line":105,"column":17},"end":{"line":110,"column":5}},"19":{"start":{"line":111,"column":17},"end":{"line":111,"column":63}},"20":{"start":{"line":112,"column":4},"end":{"line":116,"column":7}},"21":{"start":{"line":118,"column":0},"end":{"line":118,"column":44}},"22":{"start":{"line":133,"column":17},"end":{"line":142,"column":5}},"23":{"start":{"line":143,"column":17},"end":{"line":143,"column":75}},"24":{"start":{"line":144,"column":4},"end":{"line":148,"column":7}},"25":{"start":{"line":150,"column":0},"end":{"line":150,"column":36}},"26":{"start":{"line":151,"column":34},"end":{"line":155,"column":1}},"27":{"start":{"line":151,"column":99},"end":{"line":155,"column":1}},"28":{"start":{"line":164,"column":17},"end":{"line":164,"column":103}},"29":{"start":{"line":165,"column":17},"end":{"line":165,"column":53}},"30":{"start":{"line":166,"column":4},"end":{"line":170,"column":7}},"31":{"start":{"line":172,"column":0},"end":{"line":172,"column":24}},"32":{"start":{"line":181,"column":17},"end":{"line":181,"column":103}},"33":{"start":{"line":182,"column":17},"end":{"line":182,"column":53}},"34":{"start":{"line":183,"column":4},"end":{"line":187,"column":7}},"35":{"start":{"line":189,"column":0},"end":{"line":189,"column":24}},"36":{"start":{"line":198,"column":17},"end":{"line":198,"column":103}},"37":{"start":{"line":199,"column":17},"end":{"line":199,"column":55}},"38":{"start":{"line":200,"column":4},"end":{"line":204,"column":7}},"39":{"start":{"line":206,"column":0},"end":{"line":206,"column":28}},"40":{"start":{"line":216,"column":17},"end":{"line":220,"column":5}},"41":{"start":{"line":221,"column":17},"end":{"line":221,"column":69}},"42":{"start":{"line":222,"column":4},"end":{"line":226,"column":7}},"43":{"start":{"line":228,"column":0},"end":{"line":228,"column":36}},"44":{"start":{"line":229,"column":0},"end":{"line":239,"column":3}},"45":{"start":{"line":240,"column":0},"end":{"line":243,"column":3}},"46":{"start":{"line":244,"column":0},"end":{"line":250,"column":3}},"47":{"start":{"line":251,"column":0},"end":{"line":254,"column":3}},"48":{"start":{"line":255,"column":0},"end":{"line":258,"column":3}},"49":{"start":{"line":259,"column":0},"end":{"line":262,"column":3}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":27},"end":{"line":28,"column":5}},"line":24},"1":{"name":"(anonymous_1)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":42},"end":{"line":33,"column":5}},"line":29},"2":{"name":"(anonymous_2)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":20},"end":{"line":40,"column":5}},"line":34},"3":{"name":"(anonymous_3)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":20},"end":{"line":47,"column":5}},"line":41},"4":{"name":"(anonymous_4)","decl":{"start":{"line":48,"column":4},"end":{"line":48,"column":5}},"loc":{"start":{"line":48,"column":22},"end":{"line":54,"column":5}},"line":48},"5":{"name":"(anonymous_5)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":36},"end":{"line":61,"column":5}},"line":55},"6":{"name":"(anonymous_6)","decl":{"start":{"line":62,"column":4},"end":{"line":62,"column":5}},"loc":{"start":{"line":62,"column":30},"end":{"line":66,"column":5}},"line":62},"7":{"name":"addGatekeeper","decl":{"start":{"line":78,"column":9},"end":{"line":78,"column":22}},"loc":{"start":{"line":78,"column":79},"end":{"line":93,"column":1}},"line":78},"8":{"name":"revokeGatekeeper","decl":{"start":{"line":104,"column":9},"end":{"line":104,"column":25}},"loc":{"start":{"line":104,"column":85},"end":{"line":117,"column":1}},"line":104},"9":{"name":"issueVanilla","decl":{"start":{"line":132,"column":9},"end":{"line":132,"column":21}},"loc":{"start":{"line":132,"column":134},"end":{"line":149,"column":1}},"line":132},"10":{"name":"(anonymous_10)","decl":{"start":{"line":151,"column":34},"end":{"line":151,"column":35}},"loc":{"start":{"line":151,"column":99},"end":{"line":155,"column":1}},"line":151},"11":{"name":"revoke","decl":{"start":{"line":163,"column":9},"end":{"line":163,"column":15}},"loc":{"start":{"line":163,"column":77},"end":{"line":171,"column":1}},"line":163},"12":{"name":"freeze","decl":{"start":{"line":180,"column":9},"end":{"line":180,"column":15}},"loc":{"start":{"line":180,"column":77},"end":{"line":188,"column":1}},"line":180},"13":{"name":"unfreeze","decl":{"start":{"line":197,"column":9},"end":{"line":197,"column":17}},"loc":{"start":{"line":197,"column":79},"end":{"line":205,"column":1}},"line":197},"14":{"name":"updateExpiry","decl":{"start":{"line":215,"column":9},"end":{"line":215,"column":21}},"loc":{"start":{"line":215,"column":95},"end":{"line":227,"column":1}},"line":215}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":1,"15":1,"16":1,"17":1,"18":0,"19":0,"20":0,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1},"f":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{},"inputSourceMap":{"version":3,"file":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/instruction.ts","sources":["/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/instruction.ts"],"names":[],"mappings":"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","sourcesContent":["import { Assignable, Enum, SCHEMA } from \"./solanaBorsh\";\nimport { PROGRAM_ID } from \"./constants\";\nimport {\n  AccountMeta,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { Active, Frozen, GatewayTokenState, Revoked } from \"./GatewayTokenData\";\n\n/**\n * Creates instructions to send to the gateway program.\n *\n * Must match solana/program/src/instruction.rs\n */\n\nclass AddGatekeeper extends Assignable {}\nclass IssueVanilla extends Assignable {\n  seed?: Uint8Array;\n  expireTime?: number;\n}\nclass SetState extends Assignable {\n  state!: GatewayTokenState;\n}\nclass UpdateExpiry extends Assignable {\n  expireTime!: number;\n}\nclass RevokeGatekeeper extends Assignable {}\n\nexport class GatewayInstruction extends Enum {\n  addGatekeeper?: AddGatekeeper;\n  issueVanilla?: IssueVanilla;\n  setState?: SetState;\n  updateExpiry?: UpdateExpiry;\n  revokeGatekeeper?: RevokeGatekeeper;\n\n  static addGatekeeper(): GatewayInstruction {\n    return new GatewayInstruction({\n      addGatekeeper: new AddGatekeeper({}),\n    });\n  }\n\n  static issueVanilla(\n    seed?: Uint8Array,\n    expireTime?: number\n  ): GatewayInstruction {\n    return new GatewayInstruction({\n      issueVanilla: new IssueVanilla({ seed, expireTime }),\n    });\n  }\n\n  static revoke(): GatewayInstruction {\n    return new GatewayInstruction({\n      setState: new SetState({\n        state: new GatewayTokenState({ revoked: new Revoked({}) }),\n      }),\n    });\n  }\n\n  static freeze(): GatewayInstruction {\n    return new GatewayInstruction({\n      setState: new SetState({\n        state: new GatewayTokenState({ frozen: new Frozen({}) }),\n      }),\n    });\n  }\n\n  static unfreeze(): GatewayInstruction {\n    return new GatewayInstruction({\n      setState: new SetState({\n        state: new GatewayTokenState({ active: new Active({}) }),\n      }),\n    });\n  }\n\n  static updateExpiry(expireTime: number): GatewayInstruction {\n    return new GatewayInstruction({\n      updateExpiry: new UpdateExpiry({\n        expireTime,\n      }),\n    });\n  }\n\n  static revokeGatekeeper(): GatewayInstruction {\n    return new GatewayInstruction({\n      revokeGatekeeper: new RevokeGatekeeper({}),\n    });\n  }\n}\n\n/**\n * Add a gatekeeper to a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param gatekeeperAccount An uninitialised gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to add to the network\n * @param network The gatekeeper network that the account is being added to.\n */\nexport function addGatekeeper(\n  payer: PublicKey,\n  gatekeeperAccount: PublicKey,\n  gatekeeperAuthority: PublicKey,\n  network: PublicKey\n): TransactionInstruction {\n  const keys: AccountMeta[] = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: gatekeeperAccount, isSigner: false, isWritable: true },\n    { pubkey: gatekeeperAuthority, isSigner: false, isWritable: false },\n    { pubkey: network, isSigner: true, isWritable: false },\n    { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n  ];\n  const data = GatewayInstruction.addGatekeeper().encode();\n  return new TransactionInstruction({\n    keys,\n    programId: PROGRAM_ID,\n    data,\n  });\n}\n\n/**\n * Removes a gatekeeper from a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param funds_to The account the gatekeeper account's rent goes to\n * @param gatekeeperAccount The gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to remove from the network\n * @param network The gatekeeper network that the account is being removed from.\n */\nexport function revokeGatekeeper(\n  funds_to: PublicKey,\n  gatekeeperAccount: PublicKey,\n  gatekeeperAuthority: PublicKey,\n  network: PublicKey\n): TransactionInstruction {\n  const keys: AccountMeta[] = [\n    { pubkey: funds_to, isSigner: false, isWritable: true },\n    { pubkey: gatekeeperAccount, isSigner: false, isWritable: true },\n    { pubkey: gatekeeperAuthority, isSigner: false, isWritable: false },\n    { pubkey: network, isSigner: true, isWritable: false },\n  ];\n  const data = GatewayInstruction.revokeGatekeeper().encode();\n  return new TransactionInstruction({\n    keys,\n    programId: PROGRAM_ID,\n    data,\n  });\n}\n\n/**\n * Issue a gateway token to the owner publicKey. This is a 'vanilla' token, in that it does not\n * rely on any other accounts (e.g. identity accounts) to validate.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount An uninitialised gateway token account PDA. The address must be derived via getGatewayTokenKeyForOwner\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account).\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper issuing the token\n * @param owner The recipient of the token\n * @param gatekeeperAuthority The gatekeeper issuing the token\n * @param gatekeeperNetwork The network that the gatekeeper belongs to\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n * @param expireTime The unix timestamp at which the token is no longer valid\n */\nexport function issueVanilla(\n  gatewayTokenAccount: PublicKey,\n  payer: PublicKey,\n  gatekeeperAccount: PublicKey,\n  owner: PublicKey,\n  gatekeeperAuthority: PublicKey,\n  gatekeeperNetwork: PublicKey,\n  seed?: Uint8Array,\n  expireTime?: number\n): TransactionInstruction {\n  const keys: AccountMeta[] = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: owner, isSigner: false, isWritable: false },\n    { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\n    { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\n    { pubkey: gatekeeperNetwork, isSigner: false, isWritable: false },\n    { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n  ];\n  const data = GatewayInstruction.issueVanilla(seed, expireTime).encode();\n  return new TransactionInstruction({\n    keys,\n    programId: PROGRAM_ID,\n    data,\n  });\n}\n\nconst getStateChangeAccountMeta = (\n  gatewayTokenAccount: PublicKey,\n  gatekeeperAuthority: PublicKey,\n  gatekeeperAccount: PublicKey\n): AccountMeta[] => [\n  { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\n  { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\n  { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\n];\n\n/**\n * Revoke a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to revoke\n * @param gatekeeperAuthority The gatekeeper revoking the token (must be in the same network as the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper revoking the token\n */\nexport function revoke(\n  gatewayTokenAccount: PublicKey,\n  gatekeeperAuthority: PublicKey,\n  gatekeeperAccount: PublicKey\n): TransactionInstruction {\n  const keys: AccountMeta[] = getStateChangeAccountMeta(\n    gatewayTokenAccount,\n    gatekeeperAuthority,\n    gatekeeperAccount\n  );\n  const data = GatewayInstruction.revoke().encode();\n  return new TransactionInstruction({\n    keys,\n    programId: PROGRAM_ID,\n    data,\n  });\n}\n\n/**\n * Freeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to freeze\n * @param gatekeeperAuthority The gatekeeper freezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper freezing the token\n */\nexport function freeze(\n  gatewayTokenAccount: PublicKey,\n  gatekeeperAuthority: PublicKey,\n  gatekeeperAccount: PublicKey\n): TransactionInstruction {\n  const keys: AccountMeta[] = getStateChangeAccountMeta(\n    gatewayTokenAccount,\n    gatekeeperAuthority,\n    gatekeeperAccount\n  );\n  const data = GatewayInstruction.freeze().encode();\n  return new TransactionInstruction({\n    keys,\n    programId: PROGRAM_ID,\n    data,\n  });\n}\n\n/**\n * Unfreeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to unfreeze\n * @param gatekeeperAuthority The gatekeeper unfreezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper unfreezing the token\n */\nexport function unfreeze(\n  gatewayTokenAccount: PublicKey,\n  gatekeeperAuthority: PublicKey,\n  gatekeeperAccount: PublicKey\n): TransactionInstruction {\n  const keys: AccountMeta[] = getStateChangeAccountMeta(\n    gatewayTokenAccount,\n    gatekeeperAuthority,\n    gatekeeperAccount\n  );\n  const data = GatewayInstruction.unfreeze().encode();\n  return new TransactionInstruction({\n    keys,\n    programId: PROGRAM_ID,\n    data,\n  });\n}\n\n/**\n * Update the expiry time of a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to be updated (must have an expiry time)\n * @param gatekeeperAuthority The gatekeeper (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper\n * @param expireTime The new expiry time\n */\nexport function updateExpiry(\n  gatewayTokenAccount: PublicKey,\n  gatekeeperAuthority: PublicKey,\n  gatekeeperAccount: PublicKey,\n  expireTime: number\n): TransactionInstruction {\n  const keys: AccountMeta[] = [\n    { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\n    { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\n  ];\n  const data = GatewayInstruction.updateExpiry(expireTime).encode();\n  return new TransactionInstruction({\n    keys,\n    programId: PROGRAM_ID,\n    data,\n  });\n}\n\nSCHEMA.set(GatewayInstruction, {\n  kind: \"enum\",\n  field: \"enum\",\n  values: [\n    [\"addGatekeeper\", AddGatekeeper],\n    [\"issueVanilla\", IssueVanilla],\n    [\"setState\", SetState],\n    [\"updateExpiry\", UpdateExpiry],\n    [\"revokeGatekeeper\", RevokeGatekeeper],\n  ],\n});\nSCHEMA.set(AddGatekeeper, {\n  kind: \"struct\",\n  fields: [],\n});\nSCHEMA.set(IssueVanilla, {\n  kind: \"struct\",\n  fields: [\n    [\"seed\", { kind: \"option\", type: [8] }],\n    [\"expireTime\", { kind: \"option\", type: \"u64\" }],\n  ],\n});\nSCHEMA.set(SetState, {\n  kind: \"struct\",\n  fields: [[\"state\", GatewayTokenState]],\n});\nSCHEMA.set(UpdateExpiry, {\n  kind: \"struct\",\n  fields: [[\"expireTime\", \"u64\"]],\n});\nSCHEMA.set(RevokeGatekeeper, {\n  kind: \"struct\",\n  fields: [],\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"08a05e7b006c78cda2f3e42f945ccb51983f95e2","contentHash":"585d54bbbd6e38c0479b1b72c6c562944c81d11d79869431279aac2bfff4f9ed"},"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/solanaBorsh.ts":{"path":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/solanaBorsh.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"4":{"start":{"line":9,"column":8},"end":{"line":14,"column":11}},"5":{"start":{"line":13,"column":12},"end":{"line":13,"column":40}},"6":{"start":{"line":17,"column":8},"end":{"line":17,"column":73}},"7":{"start":{"line":20,"column":8},"end":{"line":20,"column":68}},"8":{"start":{"line":23,"column":0},"end":{"line":23,"column":32}},"9":{"start":{"line":28,"column":8},"end":{"line":28,"column":26}},"10":{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},"11":{"start":{"line":30,"column":12},"end":{"line":30,"column":63}},"12":{"start":{"line":32,"column":8},"end":{"line":32,"column":23}},"13":{"start":{"line":33,"column":8},"end":{"line":35,"column":11}},"14":{"start":{"line":34,"column":12},"end":{"line":34,"column":28}},"15":{"start":{"line":38,"column":0},"end":{"line":38,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":28},"end":{"line":15,"column":5}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":40},"end":{"line":9,"column":41}},"loc":{"start":{"line":9,"column":49},"end":{"line":14,"column":9}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":13},"end":{"line":18,"column":5}},"line":16},"3":{"name":"(anonymous_3)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":24},"end":{"line":21,"column":5}},"line":19},"4":{"name":"(anonymous_4)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":28},"end":{"line":36,"column":5}},"line":27},"5":{"name":"(anonymous_5)","decl":{"start":{"line":33,"column":40},"end":{"line":33,"column":41}},"loc":{"start":{"line":33,"column":49},"end":{"line":35,"column":9}},"line":33}},"branchMap":{"0":{"loc":{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},"type":"if","locations":[{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},{"start":{"line":29,"column":8},"end":{"line":31,"column":9}}],"line":29}},"s":{"0":1,"1":1,"2":1,"3":1,"4":102,"5":191,"6":10,"7":8,"8":1,"9":19,"10":19,"11":0,"12":19,"13":19,"14":19,"15":1},"f":{"0":102,"1":191,"2":10,"3":8,"4":19,"5":19},"b":{"0":[0,19]},"inputSourceMap":{"version":3,"file":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/solanaBorsh.ts","sources":["/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/solanaBorsh.ts"],"names":[],"mappings":";;;AAAA,iCAAuD;AAE1C,QAAA,MAAM,GAAW,IAAI,GAAG,EAAE,CAAC;AAExC,gCAAgC;AAChC,MAAsB,UAAU;IAC9B,YAAY,UAAkC;QAC5C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAW,EAAE,EAAE;YAC9C,2CAA2C;YAC3C,yEAAyE;YACzE,aAAa;YACb,IAAI,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM;QACJ,OAAO,MAAM,CAAC,IAAI,CAAC,IAAA,iBAAS,EAAC,cAAM,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9C,CAAC;IAED,MAAM,CAAC,MAAM,CAAuB,IAAY;QAC9C,OAAO,IAAA,mBAAW,EAAC,cAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;CACF;AAjBD,gCAiBC;AAED,6EAA6E;AAC7E,qBAAqB;AACrB,MAAsB,IAAK,SAAQ,UAAU;IAG3C,YAAY,UAAe;QACzB,KAAK,CAAC,UAAU,CAAC,CAAC;QAClB,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACxC,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;SACpD;QACD,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACtC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAClB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAbD,oBAaC","sourcesContent":["import { Schema, serialize, deserialize } from \"borsh\";\n\nexport const SCHEMA: Schema = new Map();\n\n// Class wrapping a plain object\nexport abstract class Assignable {\n  constructor(properties: { [key: string]: any }) {\n    Object.keys(properties).forEach((key: string) => {\n      // this is probably possible in Typescript,\n      // but requires (keyof this) which is not possible in the the constructor\n      // @ts-ignore\n      this[key] = properties[key];\n    });\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SCHEMA, this));\n  }\n\n  static decode<T extends Assignable>(data: Buffer): T {\n    return deserialize(SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport abstract class Enum extends Assignable {\n  enum: string;\n\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error(\"Enum can only take single value\");\n    }\n    this.enum = \"\";\n    Object.keys(properties).forEach((key) => {\n      this.enum = key;\n    });\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"31d37b3524f302f95c4938e369fe27b924f727ba","contentHash":"e111b10bd6ab10225443180eade7d9d7acc85761cf770353b13f2b33b33b71b8"},"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/constants.ts":{"path":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/constants.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":270}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":44}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":92}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":52}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":47}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":40}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":35}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":40}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":40}},"10":{"start":{"line":14,"column":0},"end":{"line":14,"column":41}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/constants.ts","sources":["/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/constants.ts"],"names":[],"mappings":";;;AAAA,6CAAwD;AAExD,4DAA4D;AAC/C,QAAA,UAAU,GAAc,IAAI,mBAAS,CAChD,6CAA6C,CAC9C,CAAC;AACW,QAAA,4BAA4B,GAAG,YAAY,CAAC,CAAC,qDAAqD;AAClG,QAAA,0BAA0B,GAAG,SAAS,CAAC,CAAC,qDAAqD;AAE7F,QAAA,iBAAiB,GAAe,WAAW,CAAC;AAC5C,QAAA,sBAAsB,GAAW,CAAC,CAAC;AAChD,6CAA6C;AAChC,QAAA,wBAAwB,GAAG,IAAI,CAAC;AAChC,QAAA,wBAAwB,GAAG,IAAI,CAAC;AAChC,QAAA,wBAAwB,GAAG,KAAK,CAAC","sourcesContent":["import { Commitment, PublicKey } from \"@solana/web3.js\";\n\n// Should equal the contents of solana/program/program-id.md\nexport const PROGRAM_ID: PublicKey = new PublicKey(\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\n);\nexport const GATEKEEPER_NONCE_SEED_STRING = \"gatekeeper\"; // must match get_inbox_address_with_seed in state.rs\nexport const GATEWAY_TOKEN_ADDRESS_SEED = \"gateway\"; // must match get_inbox_address_with_seed in state.rs\n\nexport const SOLANA_COMMITMENT: Commitment = \"confirmed\";\nexport const DEFAULT_SOLANA_RETRIES: number = 3;\n// Timeouts vary depending on the commitment.\nexport const SOLANA_TIMEOUT_PROCESSED = 3000;\nexport const SOLANA_TIMEOUT_CONFIRMED = 7000;\nexport const SOLANA_TIMEOUT_FINALIZED = 10000;\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d7aafbc52ae228677de41c34679ab34efb3a666c","contentHash":"9d53e840b599f2a8f70a6ddef8f6918bb08f289e751ae72e27f6cfac26098133"},"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/GatewayTokenData.ts":{"path":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/GatewayTokenData.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":114}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":22},"end":{"line":5,"column":46}},"4":{"start":{"line":6,"column":30},"end":{"line":6,"column":62}},"5":{"start":{"line":19,"column":8},"end":{"line":19,"column":52}},"6":{"start":{"line":22,"column":8},"end":{"line":22,"column":159}},"7":{"start":{"line":25,"column":8},"end":{"line":27,"column":11}},"8":{"start":{"line":30,"column":0},"end":{"line":30,"column":44}},"9":{"start":{"line":33,"column":0},"end":{"line":33,"column":24}},"10":{"start":{"line":36,"column":0},"end":{"line":36,"column":24}},"11":{"start":{"line":39,"column":0},"end":{"line":39,"column":26}},"12":{"start":{"line":42,"column":0},"end":{"line":42,"column":46}},"13":{"start":{"line":43,"column":0},"end":{"line":55,"column":3}},"14":{"start":{"line":56,"column":0},"end":{"line":64,"column":3}},"15":{"start":{"line":65,"column":0},"end":{"line":65,"column":65}},"16":{"start":{"line":66,"column":0},"end":{"line":66,"column":65}},"17":{"start":{"line":67,"column":0},"end":{"line":67,"column":66}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":36},"end":{"line":20,"column":5}},"line":18},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":28},"end":{"line":23,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":24},"end":{"line":28,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":26,"column":75},"end":{"line":26,"column":122}},"type":"binary-expr","locations":[{"start":{"line":26,"column":75},"end":{"line":26,"column":80}},{"start":{"line":26,"column":84},"end":{"line":26,"column":122}}],"line":26}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":8,"6":0,"7":0,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1},"f":{"0":8,"1":0,"2":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/GatewayTokenData.ts","sources":["/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/GatewayTokenData.ts"],"names":[],"mappings":";;;AAAA,6CAAqD;AACrD,+CAAyD;AACzD,+DAA4D;AAG5D;;;;;;;;;GASG;AACH,MAAa,gBAAiB,SAAQ,wBAAU;IAO9C,MAAM,CAAC,WAAW,CAAC,WAAmB;QACpC,OAAO,gBAAgB,CAAC,MAAM,CAAmB,WAAW,CAAC,CAAC;IAChE,CAAC;IAED,YAAY,CAAC,SAAoB;QAC/B,OAAO,IAAI,gBAAgB,iCACtB,IAAI,KACP,SAAS,EAAE,yCAAmB,CAAC,aAAa,CAAC,SAAS,CAAC,IACvD,CAAC;IACL,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAiB;QAC5B,OAAO,IAAI,gBAAgB,CAAC;YAC1B,KAAK,EAAE,yCAAmB,CAAC,aAAa,CACtC,KAAK,IAAI,iBAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CACtC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AAzBD,4CAyBC;AAED,MAAa,MAAO,SAAQ,wBAAU;CAAG;AAAzC,wBAAyC;AACzC,MAAa,MAAO,SAAQ,wBAAU;CAAG;AAAzC,wBAAyC;AACzC,MAAa,OAAQ,SAAQ,wBAAU;CAAG;AAA1C,0BAA0C;AAC1C,MAAa,iBAAkB,SAAQ,kBAAI;CAI1C;AAJD,8CAIC;AAED,oBAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE;IAC3B,IAAI,EAAE,QAAQ;IACd,MAAM,EAAE;QACN,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,oBAAoB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,yCAAmB,EAAE,CAAC;QACrE,CAAC,OAAO,EAAE,yCAAmB,CAAC;QAC9B,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,yCAAmB,EAAE,CAAC;QAChE,CAAC,mBAAmB,EAAE,yCAAmB,CAAC;QAC1C,CAAC,mBAAmB,EAAE,yCAAmB,CAAC;QAC1C,CAAC,OAAO,EAAE,iBAAiB,CAAC;QAC5B,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;KAC5C;CACF,CAAC,CAAC;AACH,oBAAM,CAAC,GAAG,CAAC,iBAAiB,EAAE;IAC5B,IAAI,EAAE,MAAM;IACZ,KAAK,EAAE,MAAM;IACb,MAAM,EAAE;QACN,CAAC,QAAQ,EAAE,MAAM,CAAC;QAClB,CAAC,QAAQ,EAAE,MAAM,CAAC;QAClB,CAAC,SAAS,EAAE,OAAO,CAAC;KACrB;CACF,CAAC,CAAC;AACH,oBAAM,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;AACnD,oBAAM,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;AACnD,oBAAM,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC","sourcesContent":["import { Keypair, PublicKey } from \"@solana/web3.js\";\nimport { Assignable, Enum, SCHEMA } from \"./solanaBorsh\";\nimport { AssignablePublicKey } from \"./AssignablePublicKey\";\nimport BN from \"bn.js\";\n\n/**\n * The on-chain structure of a gateway token.\n * Matches: solana/integration-lib/src/state.rs\n *\n * The pattern for these objects is to have their properties dynamically\n * assigned by borsh.decode, as opposed to via a constructor.\n *\n * The imperative assignment operator (!) is used to avoid Typescript\n * complaining about the above.\n */\nexport class GatewayTokenData extends Assignable {\n  owner!: AssignablePublicKey;\n  issuingGatekeeper!: AssignablePublicKey;\n  gatekeeperNetwork!: AssignablePublicKey;\n  state!: GatewayTokenState;\n  expiry?: BN; // u64 mapped as a hex string by Borsh\n\n  static fromAccount(accountData: Buffer): GatewayTokenData {\n    return GatewayTokenData.decode<GatewayTokenData>(accountData);\n  }\n\n  forAuthority(authority: PublicKey) {\n    return new GatewayTokenData({\n      ...this,\n      authority: AssignablePublicKey.fromPublicKey(authority),\n    });\n  }\n\n  static empty(owner?: PublicKey): GatewayTokenData {\n    return new GatewayTokenData({\n      owner: AssignablePublicKey.fromPublicKey(\n        owner || Keypair.generate().publicKey\n      ),\n    });\n  }\n}\n\nexport class Active extends Assignable {}\nexport class Frozen extends Assignable {}\nexport class Revoked extends Assignable {}\nexport class GatewayTokenState extends Enum {\n  active?: Active;\n  frozen?: Frozen;\n  revoked?: Revoked;\n}\n\nSCHEMA.set(GatewayTokenData, {\n  kind: \"struct\",\n  fields: [\n    [\"features\", [1]],\n    [\"parentGatewayToken\", { kind: \"option\", type: AssignablePublicKey }],\n    [\"owner\", AssignablePublicKey],\n    [\"ownerIdentity\", { kind: \"option\", type: AssignablePublicKey }],\n    [\"gatekeeperNetwork\", AssignablePublicKey],\n    [\"issuingGatekeeper\", AssignablePublicKey],\n    [\"state\", GatewayTokenState],\n    [\"expiry\", { kind: \"option\", type: \"u64\" }],\n  ],\n});\nSCHEMA.set(GatewayTokenState, {\n  kind: \"enum\",\n  field: \"enum\",\n  values: [\n    [\"active\", Active],\n    [\"frozen\", Frozen],\n    [\"revoked\", Revoked],\n  ],\n});\nSCHEMA.set(Active, { kind: \"struct\", fields: [] });\nSCHEMA.set(Frozen, { kind: \"struct\", fields: [] });\nSCHEMA.set(Revoked, { kind: \"struct\", fields: [] });\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9cab972cfeade584e6be065a0725b7761ffbe431","contentHash":"4f893a3973d3e9e2b507f33ebe831509d602588bf53716ec45cfe0fcbca42367"},"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/AssignablePublicKey.ts":{"path":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/AssignablePublicKey.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":37}},"2":{"start":{"line":4,"column":22},"end":{"line":4,"column":46}},"3":{"start":{"line":5,"column":18},"end":{"line":5,"column":44}},"4":{"start":{"line":17,"column":8},"end":{"line":17,"column":51}},"5":{"start":{"line":20,"column":8},"end":{"line":20,"column":45}},"6":{"start":{"line":23,"column":8},"end":{"line":23,"column":82}},"7":{"start":{"line":26,"column":8},"end":{"line":28,"column":11}},"8":{"start":{"line":31,"column":22},"end":{"line":31,"column":35}},"9":{"start":{"line":32,"column":8},"end":{"line":32,"column":22}},"10":{"start":{"line":33,"column":8},"end":{"line":33,"column":50}},"11":{"start":{"line":36,"column":0},"end":{"line":36,"column":50}},"12":{"start":{"line":37,"column":0},"end":{"line":40,"column":3}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":18},"end":{"line":18,"column":5}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":15},"end":{"line":21,"column":5}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":25},"end":{"line":24,"column":5}},"line":22},"3":{"name":"(anonymous_3)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":36},"end":{"line":29,"column":5}},"line":25},"4":{"name":"(anonymous_4)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":19},"end":{"line":34,"column":5}},"line":30}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":24,"5":0,"6":0,"7":24,"8":0,"9":0,"10":0,"11":1,"12":1},"f":{"0":24,"1":0,"2":0,"3":24,"4":0},"b":{},"inputSourceMap":{"version":3,"file":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/AssignablePublicKey.ts","sources":["/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/AssignablePublicKey.ts"],"names":[],"mappings":";;;AAAA,+CAAmD;AACnD,6CAA4C;AAE5C;;;;;;;;GAQG;AACH,MAAa,mBAAoB,SAAQ,wBAAU;IAIjD,WAAW;QACT,OAAO,IAAI,mBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,MAAc;QACzB,OAAO,mBAAmB,CAAC,aAAa,CAAC,IAAI,mBAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IAClE,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,SAAoB;QACvC,OAAO,IAAI,mBAAmB,CAAC;YAC7B,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;SAC7C,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,KAAK;QACV,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;QAC5B,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,OAAO,IAAI,mBAAmB,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAC5C,CAAC;CACF;AA3BD,kDA2BC;AAED,oBAAM,CAAC,GAAG,CAAC,mBAAmB,EAAE;IAC9B,IAAI,EAAE,QAAQ;IACd,MAAM,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC1B,CAAC,CAAC","sourcesContent":["import { Assignable, SCHEMA } from \"./solanaBorsh\";\nimport { PublicKey } from \"@solana/web3.js\";\n\n/**\n * A Borsh-compatible public key object\n *\n * The pattern for these objects is to have their properties dynamically\n * assigned by borsh.decode, as opposed to via a constructor.\n *\n * The imperative assignment operator (!) is used to avoid Typescript\n * complaining about the above.\n */\nexport class AssignablePublicKey extends Assignable {\n  // The public key bytes\n  bytes!: number[];\n\n  toPublicKey(): PublicKey {\n    return new PublicKey(this.bytes);\n  }\n\n  toString(): string {\n    return this.toPublicKey().toBase58();\n  }\n\n  static parse(pubkey: string): AssignablePublicKey {\n    return AssignablePublicKey.fromPublicKey(new PublicKey(pubkey));\n  }\n\n  static fromPublicKey(publicKey: PublicKey): AssignablePublicKey {\n    return new AssignablePublicKey({\n      bytes: Uint8Array.from(publicKey.toBuffer()),\n    });\n  }\n\n  static empty(): AssignablePublicKey {\n    const bytes = new Array(32);\n    bytes.fill(0);\n    return new AssignablePublicKey({ bytes });\n  }\n}\n\nSCHEMA.set(AssignablePublicKey, {\n  kind: \"struct\",\n  fields: [[\"bytes\", [32]]],\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"fb623490e29b14e4cdf159ee4998d81c03c05485","contentHash":"4baab1cbf1166389ca669cce70916b495da1b9f7c146562564012f006325377e"},"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/util.ts":{"path":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/util.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":89}},"4":{"start":{"line":4,"column":71},"end":{"line":4,"column":83}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"6":{"start":{"line":6,"column":26},"end":{"line":6,"column":33}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":17}},"8":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":72}},"10":{"start":{"line":12,"column":4},"end":{"line":12,"column":21}},"11":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"13":{"start":{"line":15,"column":31},"end":{"line":15,"column":42}},"14":{"start":{"line":16,"column":17},"end":{"line":16,"column":19}},"15":{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},"16":{"start":{"line":17,"column":21},"end":{"line":17,"column":141}},"17":{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},"18":{"start":{"line":17,"column":109},"end":{"line":17,"column":141}},"19":{"start":{"line":18,"column":4},"end":{"line":18,"column":36}},"20":{"start":{"line":19,"column":4},"end":{"line":19,"column":18}},"21":{"start":{"line":21,"column":16},"end":{"line":29,"column":1}},"22":{"start":{"line":22,"column":28},"end":{"line":22,"column":110}},"23":{"start":{"line":22,"column":91},"end":{"line":22,"column":106}},"24":{"start":{"line":23,"column":4},"end":{"line":28,"column":7}},"25":{"start":{"line":24,"column":36},"end":{"line":24,"column":97}},"26":{"start":{"line":24,"column":42},"end":{"line":24,"column":70}},"27":{"start":{"line":24,"column":85},"end":{"line":24,"column":95}},"28":{"start":{"line":25,"column":35},"end":{"line":25,"column":100}},"29":{"start":{"line":25,"column":41},"end":{"line":25,"column":73}},"30":{"start":{"line":25,"column":88},"end":{"line":25,"column":98}},"31":{"start":{"line":26,"column":32},"end":{"line":26,"column":116}},"32":{"start":{"line":27,"column":8},"end":{"line":27,"column":78}},"33":{"start":{"line":30,"column":22},"end":{"line":32,"column":1}},"34":{"start":{"line":31,"column":4},"end":{"line":31,"column":62}},"35":{"start":{"line":33,"column":0},"end":{"line":33,"column":62}},"36":{"start":{"line":34,"column":0},"end":{"line":34,"column":379}},"37":{"start":{"line":35,"column":18},"end":{"line":35,"column":44}},"38":{"start":{"line":36,"column":20},"end":{"line":36,"column":42}},"39":{"start":{"line":37,"column":16},"end":{"line":37,"column":35}},"40":{"start":{"line":38,"column":27},"end":{"line":38,"column":56}},"41":{"start":{"line":39,"column":22},"end":{"line":39,"column":61}},"42":{"start":{"line":40,"column":10},"end":{"line":40,"column":40}},"43":{"start":{"line":41,"column":0},"end":{"line":49,"column":2}},"44":{"start":{"line":50,"column":29},"end":{"line":81,"column":2}},"45":{"start":{"line":50,"column":68},"end":{"line":81,"column":2}},"46":{"start":{"line":51,"column":24},"end":{"line":51,"column":103}},"47":{"start":{"line":52,"column":18},"end":{"line":53,"column":38}},"48":{"start":{"line":56,"column":21},"end":{"line":56,"column":43}},"49":{"start":{"line":57,"column":20},"end":{"line":57,"column":49}},"50":{"start":{"line":58,"column":4},"end":{"line":61,"column":5}},"51":{"start":{"line":59,"column":8},"end":{"line":59,"column":124}},"52":{"start":{"line":60,"column":8},"end":{"line":60,"column":56}},"53":{"start":{"line":62,"column":4},"end":{"line":65,"column":5}},"54":{"start":{"line":63,"column":8},"end":{"line":63,"column":95}},"55":{"start":{"line":64,"column":8},"end":{"line":64,"column":23}},"56":{"start":{"line":66,"column":4},"end":{"line":69,"column":5}},"57":{"start":{"line":67,"column":8},"end":{"line":67,"column":123}},"58":{"start":{"line":68,"column":8},"end":{"line":68,"column":55}},"59":{"start":{"line":70,"column":25},"end":{"line":70,"column":26}},"60":{"start":{"line":71,"column":4},"end":{"line":80,"column":7}},"61":{"start":{"line":71,"column":44},"end":{"line":77,"column":6}},"62":{"start":{"line":72,"column":8},"end":{"line":72,"column":25}},"63":{"start":{"line":73,"column":8},"end":{"line":73,"column":127}},"64":{"start":{"line":74,"column":31},"end":{"line":74,"column":121}},"65":{"start":{"line":74,"column":65},"end":{"line":74,"column":120}},"66":{"start":{"line":74,"column":82},"end":{"line":74,"column":110}},"67":{"start":{"line":75,"column":34},"end":{"line":75,"column":38}},"68":{"start":{"line":76,"column":8},"end":{"line":76,"column":65}},"69":{"start":{"line":82,"column":0},"end":{"line":82,"column":52}},"70":{"start":{"line":83,"column":33},"end":{"line":118,"column":1}},"71":{"start":{"line":84,"column":25},"end":{"line":116,"column":5}},"72":{"start":{"line":86,"column":12},"end":{"line":110,"column":13}},"73":{"start":{"line":88,"column":20},"end":{"line":91,"column":22}},"74":{"start":{"line":89,"column":35},"end":{"line":89,"column":152}},"75":{"start":{"line":89,"column":41},"end":{"line":89,"column":152}},"76":{"start":{"line":89,"column":88},"end":{"line":89,"column":149}},"77":{"start":{"line":90,"column":24},"end":{"line":90,"column":119}},"78":{"start":{"line":93,"column":20},"end":{"line":96,"column":22}},"79":{"start":{"line":94,"column":35},"end":{"line":94,"column":147}},"80":{"start":{"line":94,"column":41},"end":{"line":94,"column":147}},"81":{"start":{"line":94,"column":88},"end":{"line":94,"column":144}},"82":{"start":{"line":95,"column":24},"end":{"line":95,"column":119}},"83":{"start":{"line":98,"column":20},"end":{"line":101,"column":22}},"84":{"start":{"line":99,"column":35},"end":{"line":99,"column":155}},"85":{"start":{"line":99,"column":41},"end":{"line":99,"column":155}},"86":{"start":{"line":99,"column":88},"end":{"line":99,"column":152}},"87":{"start":{"line":100,"column":24},"end":{"line":100,"column":119}},"88":{"start":{"line":103,"column":20},"end":{"line":106,"column":22}},"89":{"start":{"line":104,"column":35},"end":{"line":104,"column":143}},"90":{"start":{"line":104,"column":41},"end":{"line":104,"column":143}},"91":{"start":{"line":104,"column":88},"end":{"line":104,"column":140}},"92":{"start":{"line":105,"column":24},"end":{"line":105,"column":119}},"93":{"start":{"line":109,"column":20},"end":{"line":109,"column":66}},"94":{"start":{"line":113,"column":23},"end":{"line":113,"column":123}},"95":{"start":{"line":113,"column":29},"end":{"line":113,"column":123}},"96":{"start":{"line":113,"column":76},"end":{"line":113,"column":120}},"97":{"start":{"line":114,"column":12},"end":{"line":114,"column":107}},"98":{"start":{"line":117,"column":4},"end":{"line":117,"column":55}},"99":{"start":{"line":119,"column":0},"end":{"line":119,"column":60}},"100":{"start":{"line":125,"column":32},"end":{"line":132,"column":2}},"101":{"start":{"line":125,"column":56},"end":{"line":132,"column":2}},"102":{"start":{"line":126,"column":27},"end":{"line":130,"column":30}},"103":{"start":{"line":131,"column":4},"end":{"line":131,"column":29}},"104":{"start":{"line":133,"column":0},"end":{"line":133,"column":58}},"105":{"start":{"line":140,"column":35},"end":{"line":157,"column":2}},"106":{"start":{"line":140,"column":71},"end":{"line":157,"column":2}},"107":{"start":{"line":141,"column":27},"end":{"line":143,"column":47}},"108":{"start":{"line":144,"column":4},"end":{"line":148,"column":5}},"109":{"start":{"line":145,"column":8},"end":{"line":147,"column":70}},"110":{"start":{"line":149,"column":18},"end":{"line":154,"column":5}},"111":{"start":{"line":155,"column":27},"end":{"line":155,"column":102}},"112":{"start":{"line":156,"column":4},"end":{"line":156,"column":29}},"113":{"start":{"line":158,"column":0},"end":{"line":158,"column":64}},"114":{"start":{"line":163,"column":49},"end":{"line":163,"column":50}},"115":{"start":{"line":165,"column":62},"end":{"line":165,"column":64}},"116":{"start":{"line":167,"column":4},"end":{"line":168,"column":36}},"117":{"start":{"line":168,"column":8},"end":{"line":168,"column":36}},"118":{"start":{"line":169,"column":4},"end":{"line":170,"column":37}},"119":{"start":{"line":170,"column":8},"end":{"line":170,"column":37}},"120":{"start":{"line":171,"column":4},"end":{"line":172,"column":36}},"121":{"start":{"line":172,"column":8},"end":{"line":172,"column":36}},"122":{"start":{"line":173,"column":4},"end":{"line":173,"column":67}},"123":{"start":{"line":175,"column":27},"end":{"line":178,"column":1}},"124":{"start":{"line":177,"column":4},"end":{"line":177,"column":279}},"125":{"start":{"line":179,"column":0},"end":{"line":179,"column":48}},"126":{"start":{"line":188,"column":26},"end":{"line":211,"column":2}},"127":{"start":{"line":188,"column":92},"end":{"line":211,"column":2}},"128":{"start":{"line":189,"column":24},"end":{"line":194,"column":5}},"129":{"start":{"line":195,"column":36},"end":{"line":200,"column":5}},"130":{"start":{"line":201,"column":20},"end":{"line":201,"column":58}},"131":{"start":{"line":202,"column":29},"end":{"line":204,"column":6}},"132":{"start":{"line":205,"column":4},"end":{"line":206,"column":18}},"133":{"start":{"line":206,"column":8},"end":{"line":206,"column":18}},"134":{"start":{"line":207,"column":27},"end":{"line":207,"column":155}},"135":{"start":{"line":207,"column":53},"end":{"line":207,"column":155}},"136":{"start":{"line":208,"column":4},"end":{"line":210,"column":98}},"137":{"start":{"line":210,"column":34},"end":{"line":210,"column":96}},"138":{"start":{"line":212,"column":0},"end":{"line":212,"column":46}},"139":{"start":{"line":220,"column":25},"end":{"line":231,"column":2}},"140":{"start":{"line":220,"column":67},"end":{"line":231,"column":2}},"141":{"start":{"line":221,"column":19},"end":{"line":221,"column":100}},"142":{"start":{"line":222,"column":4},"end":{"line":223,"column":20}},"143":{"start":{"line":223,"column":8},"end":{"line":223,"column":20}},"144":{"start":{"line":225,"column":24},"end":{"line":225,"column":65}},"145":{"start":{"line":225,"column":49},"end":{"line":225,"column":64}},"146":{"start":{"line":226,"column":4},"end":{"line":227,"column":30}},"147":{"start":{"line":227,"column":8},"end":{"line":227,"column":30}},"148":{"start":{"line":229,"column":29},"end":{"line":229,"column":92}},"149":{"start":{"line":229,"column":54},"end":{"line":229,"column":91}},"150":{"start":{"line":230,"column":4},"end":{"line":230,"column":70}},"151":{"start":{"line":232,"column":0},"end":{"line":232,"column":44}},"152":{"start":{"line":241,"column":29},"end":{"line":247,"column":1}},"153":{"start":{"line":242,"column":28},"end":{"line":245,"column":5}},"154":{"start":{"line":243,"column":29},"end":{"line":243,"column":148}},"155":{"start":{"line":244,"column":8},"end":{"line":244,"column":31}},"156":{"start":{"line":246,"column":4},"end":{"line":246,"column":88}},"157":{"start":{"line":248,"column":0},"end":{"line":248,"column":52}},"158":{"start":{"line":254,"column":36},"end":{"line":254,"column":98}},"159":{"start":{"line":254,"column":56},"end":{"line":254,"column":98}},"160":{"start":{"line":255,"column":0},"end":{"line":255,"column":66}},"161":{"start":{"line":261,"column":24},"end":{"line":266,"column":2}},"162":{"start":{"line":261,"column":61},"end":{"line":266,"column":2}},"163":{"start":{"line":262,"column":20},"end":{"line":262,"column":103}},"164":{"start":{"line":263,"column":4},"end":{"line":264,"column":20}},"165":{"start":{"line":264,"column":8},"end":{"line":264,"column":20}},"166":{"start":{"line":265,"column":4},"end":{"line":265,"column":127}},"167":{"start":{"line":267,"column":0},"end":{"line":267,"column":42}},"168":{"start":{"line":274,"column":25},"end":{"line":278,"column":2}},"169":{"start":{"line":274,"column":81},"end":{"line":278,"column":2}},"170":{"start":{"line":275,"column":30},"end":{"line":275,"column":112}},"171":{"start":{"line":276,"column":20},"end":{"line":276,"column":101}},"172":{"start":{"line":277,"column":4},"end":{"line":277,"column":70}},"173":{"start":{"line":279,"column":0},"end":{"line":279,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":5,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":58},"end":{"line":4,"column":59}},"loc":{"start":{"line":4,"column":69},"end":{"line":4,"column":85}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":6},"end":{"line":5,"column":7}},"loc":{"start":{"line":5,"column":28},"end":{"line":8,"column":1}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":80},"end":{"line":9,"column":81}},"loc":{"start":{"line":9,"column":95},"end":{"line":11,"column":1}},"line":9},"4":{"name":"(anonymous_4)","decl":{"start":{"line":11,"column":5},"end":{"line":11,"column":6}},"loc":{"start":{"line":11,"column":20},"end":{"line":13,"column":1}},"line":11},"5":{"name":"(anonymous_5)","decl":{"start":{"line":14,"column":50},"end":{"line":14,"column":51}},"loc":{"start":{"line":14,"column":65},"end":{"line":20,"column":1}},"line":14},"6":{"name":"(anonymous_6)","decl":{"start":{"line":21,"column":44},"end":{"line":21,"column":45}},"loc":{"start":{"line":21,"column":89},"end":{"line":29,"column":1}},"line":21},"7":{"name":"adopt","decl":{"start":{"line":22,"column":13},"end":{"line":22,"column":18}},"loc":{"start":{"line":22,"column":26},"end":{"line":22,"column":112}},"line":22},"8":{"name":"(anonymous_8)","decl":{"start":{"line":22,"column":70},"end":{"line":22,"column":71}},"loc":{"start":{"line":22,"column":89},"end":{"line":22,"column":108}},"line":22},"9":{"name":"(anonymous_9)","decl":{"start":{"line":23,"column":36},"end":{"line":23,"column":37}},"loc":{"start":{"line":23,"column":63},"end":{"line":28,"column":5}},"line":23},"10":{"name":"fulfilled","decl":{"start":{"line":24,"column":17},"end":{"line":24,"column":26}},"loc":{"start":{"line":24,"column":34},"end":{"line":24,"column":99}},"line":24},"11":{"name":"rejected","decl":{"start":{"line":25,"column":17},"end":{"line":25,"column":25}},"loc":{"start":{"line":25,"column":33},"end":{"line":25,"column":102}},"line":25},"12":{"name":"step","decl":{"start":{"line":26,"column":17},"end":{"line":26,"column":21}},"loc":{"start":{"line":26,"column":30},"end":{"line":26,"column":118}},"line":26},"13":{"name":"(anonymous_13)","decl":{"start":{"line":30,"column":56},"end":{"line":30,"column":57}},"loc":{"start":{"line":30,"column":71},"end":{"line":32,"column":1}},"line":30},"14":{"name":"(anonymous_14)","decl":{"start":{"line":50,"column":29},"end":{"line":50,"column":30}},"loc":{"start":{"line":50,"column":68},"end":{"line":81,"column":2}},"line":50},"15":{"name":"(anonymous_15)","decl":{"start":{"line":50,"column":102},"end":{"line":50,"column":103}},"loc":{"start":{"line":50,"column":115},"end":{"line":81,"column":1}},"line":50},"16":{"name":"(anonymous_16)","decl":{"start":{"line":71,"column":38},"end":{"line":71,"column":39}},"loc":{"start":{"line":71,"column":44},"end":{"line":77,"column":6}},"line":71},"17":{"name":"(anonymous_17)","decl":{"start":{"line":71,"column":78},"end":{"line":71,"column":79}},"loc":{"start":{"line":71,"column":91},"end":{"line":77,"column":5}},"line":71},"18":{"name":"(anonymous_18)","decl":{"start":{"line":74,"column":43},"end":{"line":74,"column":44}},"loc":{"start":{"line":74,"column":65},"end":{"line":74,"column":120}},"line":74},"19":{"name":"(anonymous_19)","decl":{"start":{"line":74,"column":76},"end":{"line":74,"column":77}},"loc":{"start":{"line":74,"column":82},"end":{"line":74,"column":110}},"line":74},"20":{"name":"(anonymous_20)","decl":{"start":{"line":83,"column":33},"end":{"line":83,"column":34}},"loc":{"start":{"line":83,"column":105},"end":{"line":118,"column":1}},"line":83},"21":{"name":"(anonymous_21)","decl":{"start":{"line":85,"column":8},"end":{"line":85,"column":9}},"loc":{"start":{"line":85,"column":39},"end":{"line":111,"column":9}},"line":85},"22":{"name":"(anonymous_22)","decl":{"start":{"line":88,"column":27},"end":{"line":88,"column":28}},"loc":{"start":{"line":88,"column":62},"end":{"line":91,"column":21}},"line":88},"23":{"name":"(anonymous_23)","decl":{"start":{"line":89,"column":35},"end":{"line":89,"column":36}},"loc":{"start":{"line":89,"column":41},"end":{"line":89,"column":152}},"line":89},"24":{"name":"(anonymous_24)","decl":{"start":{"line":89,"column":73},"end":{"line":89,"column":74}},"loc":{"start":{"line":89,"column":86},"end":{"line":89,"column":151}},"line":89},"25":{"name":"(anonymous_25)","decl":{"start":{"line":93,"column":27},"end":{"line":93,"column":28}},"loc":{"start":{"line":93,"column":54},"end":{"line":96,"column":21}},"line":93},"26":{"name":"(anonymous_26)","decl":{"start":{"line":94,"column":35},"end":{"line":94,"column":36}},"loc":{"start":{"line":94,"column":41},"end":{"line":94,"column":147}},"line":94},"27":{"name":"(anonymous_27)","decl":{"start":{"line":94,"column":73},"end":{"line":94,"column":74}},"loc":{"start":{"line":94,"column":86},"end":{"line":94,"column":146}},"line":94},"28":{"name":"(anonymous_28)","decl":{"start":{"line":98,"column":27},"end":{"line":98,"column":28}},"loc":{"start":{"line":98,"column":62},"end":{"line":101,"column":21}},"line":98},"29":{"name":"(anonymous_29)","decl":{"start":{"line":99,"column":35},"end":{"line":99,"column":36}},"loc":{"start":{"line":99,"column":41},"end":{"line":99,"column":155}},"line":99},"30":{"name":"(anonymous_30)","decl":{"start":{"line":99,"column":73},"end":{"line":99,"column":74}},"loc":{"start":{"line":99,"column":86},"end":{"line":99,"column":154}},"line":99},"31":{"name":"(anonymous_31)","decl":{"start":{"line":103,"column":27},"end":{"line":103,"column":28}},"loc":{"start":{"line":103,"column":54},"end":{"line":106,"column":21}},"line":103},"32":{"name":"(anonymous_32)","decl":{"start":{"line":104,"column":35},"end":{"line":104,"column":36}},"loc":{"start":{"line":104,"column":41},"end":{"line":104,"column":143}},"line":104},"33":{"name":"(anonymous_33)","decl":{"start":{"line":104,"column":73},"end":{"line":104,"column":74}},"loc":{"start":{"line":104,"column":86},"end":{"line":104,"column":142}},"line":104},"34":{"name":"(anonymous_34)","decl":{"start":{"line":112,"column":8},"end":{"line":112,"column":9}},"loc":{"start":{"line":112,"column":46},"end":{"line":115,"column":9}},"line":112},"35":{"name":"(anonymous_35)","decl":{"start":{"line":113,"column":23},"end":{"line":113,"column":24}},"loc":{"start":{"line":113,"column":29},"end":{"line":113,"column":123}},"line":113},"36":{"name":"(anonymous_36)","decl":{"start":{"line":113,"column":61},"end":{"line":113,"column":62}},"loc":{"start":{"line":113,"column":74},"end":{"line":113,"column":122}},"line":113},"37":{"name":"(anonymous_37)","decl":{"start":{"line":125,"column":32},"end":{"line":125,"column":33}},"loc":{"start":{"line":125,"column":56},"end":{"line":132,"column":2}},"line":125},"38":{"name":"(anonymous_38)","decl":{"start":{"line":125,"column":90},"end":{"line":125,"column":91}},"loc":{"start":{"line":125,"column":103},"end":{"line":132,"column":1}},"line":125},"39":{"name":"(anonymous_39)","decl":{"start":{"line":140,"column":35},"end":{"line":140,"column":36}},"loc":{"start":{"line":140,"column":71},"end":{"line":157,"column":2}},"line":140},"40":{"name":"(anonymous_40)","decl":{"start":{"line":140,"column":105},"end":{"line":140,"column":106}},"loc":{"start":{"line":140,"column":118},"end":{"line":157,"column":1}},"line":140},"41":{"name":"fromGatewayTokenState","decl":{"start":{"line":166,"column":9},"end":{"line":166,"column":30}},"loc":{"start":{"line":166,"column":38},"end":{"line":174,"column":1}},"line":166},"42":{"name":"(anonymous_42)","decl":{"start":{"line":175,"column":27},"end":{"line":175,"column":28}},"loc":{"start":{"line":175,"column":48},"end":{"line":178,"column":1}},"line":175},"43":{"name":"(anonymous_43)","decl":{"start":{"line":188,"column":26},"end":{"line":188,"column":27}},"loc":{"start":{"line":188,"column":92},"end":{"line":211,"column":2}},"line":188},"44":{"name":"(anonymous_44)","decl":{"start":{"line":188,"column":126},"end":{"line":188,"column":127}},"loc":{"start":{"line":188,"column":139},"end":{"line":211,"column":1}},"line":188},"45":{"name":"(anonymous_45)","decl":{"start":{"line":207,"column":27},"end":{"line":207,"column":28}},"loc":{"start":{"line":207,"column":53},"end":{"line":207,"column":155}},"line":207},"46":{"name":"(anonymous_46)","decl":{"start":{"line":210,"column":16},"end":{"line":210,"column":17}},"loc":{"start":{"line":210,"column":34},"end":{"line":210,"column":96}},"line":210},"47":{"name":"(anonymous_47)","decl":{"start":{"line":220,"column":25},"end":{"line":220,"column":26}},"loc":{"start":{"line":220,"column":67},"end":{"line":231,"column":2}},"line":220},"48":{"name":"(anonymous_48)","decl":{"start":{"line":220,"column":101},"end":{"line":220,"column":102}},"loc":{"start":{"line":220,"column":114},"end":{"line":231,"column":1}},"line":220},"49":{"name":"(anonymous_49)","decl":{"start":{"line":225,"column":38},"end":{"line":225,"column":39}},"loc":{"start":{"line":225,"column":49},"end":{"line":225,"column":64}},"line":225},"50":{"name":"(anonymous_50)","decl":{"start":{"line":229,"column":43},"end":{"line":229,"column":44}},"loc":{"start":{"line":229,"column":54},"end":{"line":229,"column":91}},"line":229},"51":{"name":"(anonymous_51)","decl":{"start":{"line":241,"column":29},"end":{"line":241,"column":30}},"loc":{"start":{"line":241,"column":120},"end":{"line":247,"column":1}},"line":241},"52":{"name":"(anonymous_52)","decl":{"start":{"line":242,"column":28},"end":{"line":242,"column":29}},"loc":{"start":{"line":242,"column":45},"end":{"line":245,"column":5}},"line":242},"53":{"name":"(anonymous_53)","decl":{"start":{"line":254,"column":36},"end":{"line":254,"column":37}},"loc":{"start":{"line":254,"column":56},"end":{"line":254,"column":98}},"line":254},"54":{"name":"(anonymous_54)","decl":{"start":{"line":261,"column":24},"end":{"line":261,"column":25}},"loc":{"start":{"line":261,"column":61},"end":{"line":266,"column":2}},"line":261},"55":{"name":"(anonymous_55)","decl":{"start":{"line":261,"column":95},"end":{"line":261,"column":96}},"loc":{"start":{"line":261,"column":108},"end":{"line":266,"column":1}},"line":261},"56":{"name":"(anonymous_56)","decl":{"start":{"line":274,"column":25},"end":{"line":274,"column":26}},"loc":{"start":{"line":274,"column":81},"end":{"line":278,"column":2}},"line":274},"57":{"name":"(anonymous_57)","decl":{"start":{"line":274,"column":115},"end":{"line":274,"column":116}},"loc":{"start":{"line":274,"column":128},"end":{"line":278,"column":1}},"line":274}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":8,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":8,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":5,"column":1}},{"start":{"line":5,"column":6},"end":{"line":8,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},{"start":{"line":6,"column":4},"end":{"line":6,"column":33}}],"line":6},"4":{"loc":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"type":"binary-expr","locations":[{"start":{"line":9,"column":26},"end":{"line":9,"column":30}},{"start":{"line":9,"column":34},"end":{"line":9,"column":57}},{"start":{"line":9,"column":63},"end":{"line":13,"column":1}}],"line":9},"5":{"loc":{"start":{"line":9,"column":63},"end":{"line":13,"column":1}},"type":"cond-expr","locations":[{"start":{"line":9,"column":80},"end":{"line":11,"column":1}},{"start":{"line":11,"column":5},"end":{"line":13,"column":1}}],"line":9},"6":{"loc":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"type":"binary-expr","locations":[{"start":{"line":14,"column":20},"end":{"line":14,"column":24}},{"start":{"line":14,"column":28},"end":{"line":14,"column":45}},{"start":{"line":14,"column":50},"end":{"line":20,"column":1}}],"line":14},"7":{"loc":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},{"start":{"line":15,"column":4},"end":{"line":15,"column":42}}],"line":15},"8":{"loc":{"start":{"line":15,"column":8},"end":{"line":15,"column":29}},"type":"binary-expr","locations":[{"start":{"line":15,"column":8},"end":{"line":15,"column":11}},{"start":{"line":15,"column":15},"end":{"line":15,"column":29}}],"line":15},"9":{"loc":{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},{"start":{"line":17,"column":4},"end":{"line":17,"column":141}}],"line":17},"10":{"loc":{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},"type":"if","locations":[{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},{"start":{"line":17,"column":40},"end":{"line":17,"column":141}}],"line":17},"11":{"loc":{"start":{"line":17,"column":44},"end":{"line":17,"column":107}},"type":"binary-expr","locations":[{"start":{"line":17,"column":44},"end":{"line":17,"column":59}},{"start":{"line":17,"column":63},"end":{"line":17,"column":107}}],"line":17},"12":{"loc":{"start":{"line":21,"column":16},"end":{"line":29,"column":1}},"type":"binary-expr","locations":[{"start":{"line":21,"column":17},"end":{"line":21,"column":21}},{"start":{"line":21,"column":25},"end":{"line":21,"column":39}},{"start":{"line":21,"column":44},"end":{"line":29,"column":1}}],"line":21},"13":{"loc":{"start":{"line":22,"column":35},"end":{"line":22,"column":109}},"type":"cond-expr","locations":[{"start":{"line":22,"column":56},"end":{"line":22,"column":61}},{"start":{"line":22,"column":64},"end":{"line":22,"column":109}}],"line":22},"14":{"loc":{"start":{"line":23,"column":16},"end":{"line":23,"column":34}},"type":"binary-expr","locations":[{"start":{"line":23,"column":16},"end":{"line":23,"column":17}},{"start":{"line":23,"column":22},"end":{"line":23,"column":33}}],"line":23},"15":{"loc":{"start":{"line":26,"column":32},"end":{"line":26,"column":115}},"type":"cond-expr","locations":[{"start":{"line":26,"column":46},"end":{"line":26,"column":67}},{"start":{"line":26,"column":70},"end":{"line":26,"column":115}}],"line":26},"16":{"loc":{"start":{"line":27,"column":51},"end":{"line":27,"column":67}},"type":"binary-expr","locations":[{"start":{"line":27,"column":51},"end":{"line":27,"column":61}},{"start":{"line":27,"column":65},"end":{"line":27,"column":67}}],"line":27},"17":{"loc":{"start":{"line":30,"column":22},"end":{"line":32,"column":1}},"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":27}},{"start":{"line":30,"column":31},"end":{"line":30,"column":51}},{"start":{"line":30,"column":56},"end":{"line":32,"column":1}}],"line":30},"18":{"loc":{"start":{"line":31,"column":11},"end":{"line":31,"column":61}},"type":"cond-expr","locations":[{"start":{"line":31,"column":37},"end":{"line":31,"column":40}},{"start":{"line":31,"column":43},"end":{"line":31,"column":61}}],"line":31},"19":{"loc":{"start":{"line":31,"column":12},"end":{"line":31,"column":33}},"type":"binary-expr","locations":[{"start":{"line":31,"column":12},"end":{"line":31,"column":15}},{"start":{"line":31,"column":19},"end":{"line":31,"column":33}}],"line":31},"20":{"loc":{"start":{"line":52,"column":18},"end":{"line":53,"column":38}},"type":"binary-expr","locations":[{"start":{"line":52,"column":18},"end":{"line":52,"column":63}},{"start":{"line":53,"column":8},"end":{"line":53,"column":38}}],"line":52},"21":{"loc":{"start":{"line":58,"column":4},"end":{"line":61,"column":5}},"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":61,"column":5}},{"start":{"line":58,"column":4},"end":{"line":61,"column":5}}],"line":58},"22":{"loc":{"start":{"line":62,"column":4},"end":{"line":65,"column":5}},"type":"if","locations":[{"start":{"line":62,"column":4},"end":{"line":65,"column":5}},{"start":{"line":62,"column":4},"end":{"line":65,"column":5}}],"line":62},"23":{"loc":{"start":{"line":66,"column":4},"end":{"line":69,"column":5}},"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":69,"column":5}},{"start":{"line":66,"column":4},"end":{"line":69,"column":5}}],"line":66},"24":{"loc":{"start":{"line":83,"column":54},"end":{"line":83,"column":100}},"type":"default-arg","locations":[{"start":{"line":83,"column":74},"end":{"line":83,"column":100}}],"line":83},"25":{"loc":{"start":{"line":86,"column":12},"end":{"line":110,"column":13}},"type":"switch","locations":[{"start":{"line":87,"column":16},"end":{"line":91,"column":22}},{"start":{"line":92,"column":16},"end":{"line":96,"column":22}},{"start":{"line":97,"column":16},"end":{"line":101,"column":22}},{"start":{"line":102,"column":16},"end":{"line":106,"column":22}},{"start":{"line":107,"column":16},"end":{"line":109,"column":66}}],"line":86},"26":{"loc":{"start":{"line":141,"column":27},"end":{"line":143,"column":47}},"type":"cond-expr","locations":[{"start":{"line":142,"column":10},"end":{"line":142,"column":27}},{"start":{"line":143,"column":10},"end":{"line":143,"column":47}}],"line":141},"27":{"loc":{"start":{"line":144,"column":4},"end":{"line":148,"column":5}},"type":"if","locations":[{"start":{"line":144,"column":4},"end":{"line":148,"column":5}},{"start":{"line":144,"column":4},"end":{"line":148,"column":5}}],"line":144},"28":{"loc":{"start":{"line":167,"column":4},"end":{"line":168,"column":36}},"type":"if","locations":[{"start":{"line":167,"column":4},"end":{"line":168,"column":36}},{"start":{"line":167,"column":4},"end":{"line":168,"column":36}}],"line":167},"29":{"loc":{"start":{"line":169,"column":4},"end":{"line":170,"column":37}},"type":"if","locations":[{"start":{"line":169,"column":4},"end":{"line":170,"column":37}},{"start":{"line":169,"column":4},"end":{"line":170,"column":37}}],"line":169},"30":{"loc":{"start":{"line":171,"column":4},"end":{"line":172,"column":36}},"type":"if","locations":[{"start":{"line":171,"column":4},"end":{"line":172,"column":36}},{"start":{"line":171,"column":4},"end":{"line":172,"column":36}}],"line":171},"31":{"loc":{"start":{"line":177,"column":208},"end":{"line":177,"column":277}},"type":"cond-expr","locations":[{"start":{"line":177,"column":255},"end":{"line":177,"column":261}},{"start":{"line":177,"column":264},"end":{"line":177,"column":277}}],"line":177},"32":{"loc":{"start":{"line":177,"column":208},"end":{"line":177,"column":252}},"type":"binary-expr","locations":[{"start":{"line":177,"column":208},"end":{"line":177,"column":235}},{"start":{"line":177,"column":239},"end":{"line":177,"column":252}}],"line":177},"33":{"loc":{"start":{"line":188,"column":65},"end":{"line":188,"column":87}},"type":"default-arg","locations":[{"start":{"line":188,"column":82},"end":{"line":188,"column":87}}],"line":188},"34":{"loc":{"start":{"line":198,"column":19},"end":{"line":198,"column":117}},"type":"cond-expr","locations":[{"start":{"line":198,"column":80},"end":{"line":198,"column":86}},{"start":{"line":198,"column":89},"end":{"line":198,"column":117}}],"line":198},"35":{"loc":{"start":{"line":198,"column":19},"end":{"line":198,"column":77}},"type":"binary-expr","locations":[{"start":{"line":198,"column":19},"end":{"line":198,"column":45}},{"start":{"line":198,"column":49},"end":{"line":198,"column":77}}],"line":198},"36":{"loc":{"start":{"line":205,"column":4},"end":{"line":206,"column":18}},"type":"if","locations":[{"start":{"line":205,"column":4},"end":{"line":206,"column":18}},{"start":{"line":205,"column":4},"end":{"line":206,"column":18}}],"line":205},"37":{"loc":{"start":{"line":210,"column":34},"end":{"line":210,"column":96}},"type":"binary-expr","locations":[{"start":{"line":210,"column":34},"end":{"line":210,"column":78}},{"start":{"line":210,"column":82},"end":{"line":210,"column":96}}],"line":210},"38":{"loc":{"start":{"line":222,"column":4},"end":{"line":223,"column":20}},"type":"if","locations":[{"start":{"line":222,"column":4},"end":{"line":223,"column":20}},{"start":{"line":222,"column":4},"end":{"line":223,"column":20}}],"line":222},"39":{"loc":{"start":{"line":226,"column":4},"end":{"line":227,"column":30}},"type":"if","locations":[{"start":{"line":226,"column":4},"end":{"line":227,"column":30}},{"start":{"line":226,"column":4},"end":{"line":227,"column":30}}],"line":226},"40":{"loc":{"start":{"line":230,"column":11},"end":{"line":230,"column":69}},"type":"cond-expr","locations":[{"start":{"line":230,"column":43},"end":{"line":230,"column":47}},{"start":{"line":230,"column":50},"end":{"line":230,"column":69}}],"line":230},"41":{"loc":{"start":{"line":241,"column":73},"end":{"line":241,"column":115}},"type":"default-arg","locations":[{"start":{"line":241,"column":86},"end":{"line":241,"column":115}}],"line":241},"42":{"loc":{"start":{"line":263,"column":4},"end":{"line":264,"column":20}},"type":"if","locations":[{"start":{"line":263,"column":4},"end":{"line":264,"column":20}},{"start":{"line":263,"column":4},"end":{"line":264,"column":20}}],"line":263},"43":{"loc":{"start":{"line":277,"column":11},"end":{"line":277,"column":69}},"type":"binary-expr","locations":[{"start":{"line":277,"column":11},"end":{"line":277,"column":26}},{"start":{"line":277,"column":30},"end":{"line":277,"column":69}}],"line":277}},"s":{"0":1,"1":257,"2":257,"3":257,"4":0,"5":0,"6":0,"7":0,"8":1,"9":1,"10":0,"11":1,"12":1,"13":0,"14":1,"15":1,"16":1,"17":257,"18":257,"19":1,"20":1,"21":1,"22":9,"23":0,"24":10,"25":9,"26":9,"27":0,"28":0,"29":0,"30":0,"31":18,"32":10,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":1,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":1,"100":1,"101":2,"102":2,"103":2,"104":1,"105":1,"106":2,"107":2,"108":2,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":8,"117":4,"118":4,"119":4,"120":0,"121":0,"122":0,"123":1,"124":8,"125":1,"126":1,"127":6,"128":6,"129":6,"130":6,"131":6,"132":6,"133":0,"134":6,"135":5,"136":6,"137":5,"138":1,"139":1,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":1,"152":1,"153":2,"154":2,"155":2,"156":2,"157":1,"158":1,"159":1,"160":1,"161":1,"162":0,"163":0,"164":0,"165":0,"166":0,"167":1,"168":1,"169":0,"170":0,"171":0,"172":0,"173":1},"f":{"0":257,"1":0,"2":0,"3":1,"4":0,"5":1,"6":10,"7":9,"8":0,"9":10,"10":9,"11":0,"12":18,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":2,"38":2,"39":2,"40":2,"41":8,"42":8,"43":6,"44":6,"45":5,"46":5,"47":0,"48":0,"49":0,"50":0,"51":2,"52":2,"53":1,"54":0,"55":0,"56":0,"57":0},"b":{"0":[1,1,1],"1":[1,0],"2":[257,0],"3":[0,0],"4":[1,1,1],"5":[1,0],"6":[1,1,1],"7":[0,1],"8":[1,1],"9":[1,0],"10":[257,0],"11":[257,257],"12":[1,1,1],"13":[9,0],"14":[10,10],"15":[9,9],"16":[10,10],"17":[1,1,1],"18":[0,1],"19":[1,1],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0],"25":[0,0,0,0,0],"26":[1,1],"27":[1,1],"28":[4,4],"29":[4,0],"30":[0,0],"31":[8,0],"32":[8,8],"33":[4],"34":[0,6],"35":[6,6],"36":[0,6],"37":[5,3],"38":[0,0],"39":[0,0],"40":[0,0],"41":[2],"42":[0,0],"43":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/util.ts","sources":["/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/lib/util.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AccountInfo,\n  Commitment,\n  Connection,\n  GetProgramAccountsConfig,\n  PublicKey,\n  RpcResponseAndContext,\n  SendOptions,\n  SignatureResult,\n  Signer,\n  Transaction,\n} from \"@solana/web3.js\";\nimport {\n  GATEKEEPER_NONCE_SEED_STRING,\n  GATEWAY_TOKEN_ADDRESS_SEED,\n  PROGRAM_ID,\n  SOLANA_COMMITMENT,\n  SOLANA_TIMEOUT_CONFIRMED,\n  SOLANA_TIMEOUT_FINALIZED,\n  SOLANA_TIMEOUT_PROCESSED,\n  DEFAULT_SOLANA_RETRIES,\n} from \"./constants\";\nimport {\n  DeepPartial,\n  GatewayToken,\n  ProgramAccountResponse,\n  State,\n} from \"../types\";\nimport { GatewayTokenData, GatewayTokenState } from \"./GatewayTokenData\";\nimport retry from \"async-retry\";\nimport * as R from \"ramda\";\n\nexport type RetryConfig = {\n  retryCount: number;\n  exponentialFactor: number;\n  timeouts: {\n    processed: number;\n    confirmed: number;\n    finalized: number;\n  };\n};\n\nexport const defaultRetryConfig = {\n  retryCount: DEFAULT_SOLANA_RETRIES,\n  exponentialFactor: 2,\n  timeouts: {\n    processed: SOLANA_TIMEOUT_PROCESSED,\n    confirmed: SOLANA_TIMEOUT_CONFIRMED,\n    finalized: SOLANA_TIMEOUT_FINALIZED,\n  },\n};\n\nexport const runFunctionWithRetry = async (\n  fn: () => Promise<unknown>,\n  commitment: Commitment,\n  customRetryConfig: DeepPartial<RetryConfig>\n): Promise<unknown> => {\n  const retryConfig = {\n    ...defaultRetryConfig,\n    ...customRetryConfig,\n  } as RetryConfig;\n\n  let timeout: number =\n    R.path([\"timeouts\", commitment], retryConfig) ||\n    retryConfig.timeouts.confirmed;\n\n  // If we have any bugs before this point, this is the final safeguard against undefined retry config values.\n  // TODO IDCOM-1558 Improve the type safety of config to avoid the need for checks such as this.\n  let retryCount = retryConfig.retryCount;\n  let expFactor = retryConfig.exponentialFactor;\n  if (!retryCount) {\n    console.error(\n      `retryCount not set in Solana connection proxy. Defaulting to ${DEFAULT_SOLANA_RETRIES}`\n    );\n    retryCount = DEFAULT_SOLANA_RETRIES;\n  }\n\n  if (!expFactor) {\n    console.error(\n      \"exponentialFactor not set in Solana connection proxy. Defaulting to 2\"\n    );\n    retryCount = 2;\n  }\n\n  if (!timeout) {\n    console.error(\n      `timeout not set in Solana connection proxy. Defaulting to ${SOLANA_TIMEOUT_CONFIRMED}`\n    );\n    timeout = SOLANA_TIMEOUT_CONFIRMED;\n  }\n\n  let currentAttempt = 0;\n\n  return retry(\n    async () => {\n      currentAttempt++;\n      console.log(\n        `Trying Solana blockchain call (attempt ${currentAttempt} of ${\n          retryConfig.retryCount + 1\n        })`,\n        { timeout }\n      );\n      const timeoutPromise = new Promise((_resolve, reject) =>\n        setTimeout(() => reject(new Error(\"timeout\")), timeout)\n      );\n      const blockchainPromise = fn();\n      return Promise.race([blockchainPromise, timeoutPromise]);\n    },\n    {\n      retries: retryCount,\n      factor: expFactor,\n    }\n  );\n};\n\nexport const proxyConnectionWithRetry = (\n  originalConnection: Connection,\n  customRetryConfig: DeepPartial<RetryConfig> = defaultRetryConfig\n): Connection => {\n  const proxyHandler: ProxyHandler<Connection> = {\n    get(target: Connection, propKey, receiver) {\n      switch (propKey) {\n        case \"sendTransaction\":\n          return (\n            transaction: Transaction,\n            signers: Signer[],\n            options: SendOptions | undefined\n          ): Promise<string> => {\n            const fn = async () =>\n              target.sendTransaction(transaction, signers, options);\n            return runFunctionWithRetry(\n              fn,\n              SOLANA_COMMITMENT,\n              customRetryConfig\n            ) as Promise<string>;\n          };\n        case \"confirmTransaction\":\n          return (\n            signature: string,\n            commitment?: Commitment | undefined\n          ): Promise<RpcResponseAndContext<SignatureResult>> => {\n            const fn = async () =>\n              target.confirmTransaction(signature, commitment);\n            return runFunctionWithRetry(\n              fn,\n              SOLANA_COMMITMENT,\n              customRetryConfig\n            ) as Promise<RpcResponseAndContext<SignatureResult>>;\n          };\n        case \"getProgramAccounts\":\n          return (\n            programId: PublicKey,\n            configOrCommitment?:\n              | Commitment\n              | GetProgramAccountsConfig\n              | undefined\n          ): Promise<\n            {\n              pubkey: PublicKey;\n              account: AccountInfo<Buffer>;\n            }[]\n          > => {\n            const fn = async () =>\n              target.getProgramAccounts(programId, configOrCommitment);\n            return runFunctionWithRetry(\n              fn,\n              SOLANA_COMMITMENT,\n              customRetryConfig\n            ) as Promise<\n              {\n                pubkey: PublicKey;\n                account: AccountInfo<Buffer>;\n              }[]\n            >;\n          };\n        case \"getAccountInfo\":\n          return (\n            publicKey: PublicKey,\n            commitment?: Commitment | undefined\n          ): Promise<AccountInfo<Buffer> | null> => {\n            const fn = async () => target.getAccountInfo(publicKey, commitment);\n            return runFunctionWithRetry(\n              fn,\n              SOLANA_COMMITMENT,\n              customRetryConfig\n            ) as Promise<AccountInfo<Buffer> | null>;\n          };\n        default:\n          // Return the original property unchanged:\n          return Reflect.get(target, propKey, receiver);\n      }\n    },\n    apply(target: any, thisArg, argumentsList) {\n      const fn = async () => target.apply(thisArg, argumentsList);\n      return runFunctionWithRetry(fn, SOLANA_COMMITMENT, customRetryConfig);\n    },\n  };\n  return new Proxy<Connection>(originalConnection, proxyHandler);\n};\n\n/**\n * Derive the address of the gatekeeper PDA for this gatekeeper\n * @param authority The gatekeeper\n * @param network The network\n */\nexport const getGatekeeperAccountKey = async (\n  authority: PublicKey,\n  network: PublicKey\n): Promise<PublicKey> => {\n  const publicKeyNonce = await PublicKey.findProgramAddress(\n    [\n      authority.toBuffer(),\n      network.toBuffer(),\n      Buffer.from(GATEKEEPER_NONCE_SEED_STRING, \"utf8\"),\n    ],\n    PROGRAM_ID\n  );\n  return publicKeyNonce[0];\n};\n\n/**\n * Derive the address of the gateway token PDA for this owner address and optional seed.\n * @param owner The owner of the gateway token\n * @param gatekeeperNetwork The network of the gateway token\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n */\nexport const getGatewayTokenKeyForOwner = async (\n  owner: PublicKey,\n  gatekeeperNetwork: PublicKey,\n  seed?: Uint8Array\n): Promise<PublicKey> => {\n  const additionalSeed = seed\n    ? Buffer.from(seed)\n    : Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]);\n  if (additionalSeed.length != 8) {\n    throw new Error(\n      \"Additional Seed has length \" +\n        additionalSeed.length +\n        \" instead of 8 when calling getGatewayTokenKeyForOwner.\"\n    );\n  }\n  const seeds = [\n    owner.toBuffer(),\n    Buffer.from(GATEWAY_TOKEN_ADDRESS_SEED, \"utf8\"),\n    additionalSeed,\n    gatekeeperNetwork.toBuffer(),\n  ];\n\n  const publicKeyNonce = await PublicKey.findProgramAddress(seeds, PROGRAM_ID);\n  return publicKeyNonce[0];\n};\n\n// Based on solana/integration-lib/src/state.rs\n// If the optional the parent-gateway-token field is populated, this value will be\n// 34 (2 + 32) instead. TODO IDCOM-320 restructure the gateway token accounts to put\n// all optional values at the end of the struct to simplify account parsing a little\nconst GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET = 2;\n// As above, if optional fields are present, this will differ. TODO IDCOM-320 fixes this\nconst GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET = 35;\n\nfunction fromGatewayTokenState(state: GatewayTokenState): State {\n  if (!!state.active) return State.ACTIVE;\n  if (!!state.revoked) return State.REVOKED;\n  if (!!state.frozen) return State.FROZEN;\n\n  throw new Error(\"Unrecognised state \" + JSON.stringify(state));\n}\n\nexport const dataToGatewayToken = (\n  data: GatewayTokenData,\n  publicKey: PublicKey\n): GatewayToken =>\n  new GatewayToken(\n    data.issuingGatekeeper.toPublicKey(),\n    data.gatekeeperNetwork.toPublicKey(),\n    data.owner.toPublicKey(),\n    fromGatewayTokenState(data.state),\n    publicKey,\n    PROGRAM_ID,\n    data.expiry?.toNumber()\n  );\n\n/**\n * Find all gateway tokens for a user on a gatekeeper network, optionally filtering out revoked tokens\n * @param connection A solana connection object\n * @param owner The token owner\n * @param gatekeeperNetwork The network to find a token for\n * @param {boolean=false} includeRevoked If false (default), filter out revoked tokens\n * @returns {Promise<GatewayToken[]>} All tokens for the owner\n */\nexport const findGatewayTokens = async (\n  connection: Connection,\n  owner: PublicKey,\n  gatekeeperNetwork: PublicKey,\n  includeRevoked = false\n): Promise<GatewayToken[]> => {\n  const ownerFilter = {\n    memcmp: {\n      offset: GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET,\n      bytes: owner.toBase58(),\n    },\n  };\n  const gatekeeperNetworkFilter = {\n    memcmp: {\n      offset: GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET,\n      bytes: gatekeeperNetwork?.toBase58(),\n    },\n  };\n  const filters = [ownerFilter, gatekeeperNetworkFilter];\n  const accountsResponse = await connection.getProgramAccounts(PROGRAM_ID, {\n    filters,\n  });\n\n  if (!accountsResponse) return [];\n\n  const toGatewayToken = ({\n    pubkey,\n    account,\n  }: ProgramAccountResponse): GatewayToken =>\n    dataToGatewayToken(GatewayTokenData.fromAccount(account.data), pubkey);\n\n  return accountsResponse\n    .map(toGatewayToken)\n    .filter(\n      (gatewayToken) => gatewayToken.state !== State.REVOKED || includeRevoked\n    );\n};\n\n/**\n * Find any unrevoked token for a user on a gatekeeper network\n * @param connection A solana connection object\n * @param owner The token owner\n * @param gatekeeperNetwork The network to find a token for\n * @returns Promise<GatewayToken | null> An unrevoked token, if one exists for the owner\n */\nexport const findGatewayToken = async (\n  connection: Connection,\n  owner: PublicKey,\n  gatekeeperNetwork: PublicKey\n): Promise<GatewayToken | null> => {\n  const tokens = await findGatewayTokens(\n    connection,\n    owner,\n    gatekeeperNetwork,\n    false\n  );\n\n  if (tokens.length === 0) return null;\n\n  // if any are valid, return the first one\n  const validTokens = tokens.filter((token) => token.isValid());\n  if (validTokens.length > 0) return validTokens[0];\n\n  // if none is valid, return the first non-revoked one\n  const nonRevokedTokens = tokens.filter(\n    (token) => token.state !== State.REVOKED\n  );\n\n  return nonRevokedTokens.length === 0 ? null : nonRevokedTokens[0];\n};\n\n/**\n * Register a callback to be called whenever a gateway token changes state\n * @param connection A solana connection object\n * @param gatewayTokenAddress The address of the gateway token\n * @param callback The callback to register\n * @param commitment The solana commitment level at which to register gateway token changes. Defaults to 'confirmed'\n * @return The subscription id\n */\nexport const onGatewayTokenChange = (\n  connection: Connection,\n  gatewayTokenAddress: PublicKey,\n  callback: (gatewayToken: GatewayToken) => void,\n  commitment: Commitment = SOLANA_COMMITMENT\n): number => {\n  const accountCallback = (accountInfo: AccountInfo<Buffer>) => {\n    const gatewayToken = dataToGatewayToken(\n      GatewayTokenData.fromAccount(accountInfo.data),\n      gatewayTokenAddress\n    );\n    callback(gatewayToken);\n  };\n  return connection.onAccountChange(\n    gatewayTokenAddress,\n    accountCallback,\n    commitment\n  );\n};\n\n/**\n * Stops listening to gateway state changes\n * @param connection A solana connection object\n * @param id The subscription id to deregister\n */\nexport const removeAccountChangeListener = (\n  connection: Connection,\n  id: number\n): Promise<void> => connection.removeAccountChangeListener(id);\n\n/**\n * Lookup the gateway token at a given address\n * @param connection A solana connection object\n * @param gatewayTokenAddress The address of the gateway token\n */\nexport const getGatewayToken = async (\n  connection: Connection,\n  gatewayTokenAddress: PublicKey\n): Promise<GatewayToken | null> => {\n  const account = await connection.getAccountInfo(\n    gatewayTokenAddress,\n    SOLANA_COMMITMENT\n  );\n\n  if (!account) return null;\n\n  return dataToGatewayToken(\n    GatewayTokenData.fromAccount(account.data),\n    gatewayTokenAddress\n  );\n};\n\n/**\n * Returns whether or not a gatekeeper exists from a network and authority\n * @param connection A solana connection\n * @param gatekeeperAuthority The authority of the gatekeeper\n * @param gatekeeperNetwork The network of the gatekeeper\n */\nexport const gatekeeperExists = async (\n  connection: Connection,\n  gatekeeperAuthority: PublicKey,\n  gatekeeperNetwork: PublicKey\n): Promise<boolean> => {\n  const gatekeeperAccount = await getGatekeeperAccountKey(\n    gatekeeperAuthority,\n    gatekeeperNetwork\n  );\n  const account = await connection.getAccountInfo(\n    gatekeeperAccount,\n    SOLANA_COMMITMENT\n  );\n\n  return account != null && account.owner == PROGRAM_ID;\n};\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8ba21a6702565f37418f602e53cadad15a24eb78","contentHash":"2666bf6992450dd76fbe7d202bfc0d35852d00abf1970b69d28ff11f178971e7"},"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/types/index.ts":{"path":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/types/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":46}},"2":{"start":{"line":4,"column":27},"end":{"line":4,"column":61}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":37}},"4":{"start":{"line":7,"column":0},"end":{"line":11,"column":50}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":31}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":33}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":31}},"8":{"start":{"line":16,"column":8},"end":{"line":16,"column":51}},"9":{"start":{"line":17,"column":8},"end":{"line":17,"column":51}},"10":{"start":{"line":18,"column":8},"end":{"line":18,"column":27}},"11":{"start":{"line":19,"column":8},"end":{"line":19,"column":27}},"12":{"start":{"line":20,"column":8},"end":{"line":20,"column":35}},"13":{"start":{"line":21,"column":8},"end":{"line":21,"column":35}},"14":{"start":{"line":22,"column":8},"end":{"line":22,"column":37}},"15":{"start":{"line":25,"column":8},"end":{"line":25,"column":65}},"16":{"start":{"line":28,"column":20},"end":{"line":28,"column":49}},"17":{"start":{"line":29,"column":8},"end":{"line":29,"column":58}},"18":{"start":{"line":32,"column":27},"end":{"line":32,"column":92}},"19":{"start":{"line":33,"column":8},"end":{"line":33,"column":63}},"20":{"start":{"line":36,"column":8},"end":{"line":36,"column":162}},"21":{"start":{"line":39,"column":0},"end":{"line":39,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":1},"end":{"line":7,"column":2}},"loc":{"start":{"line":7,"column":18},"end":{"line":11,"column":1}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":15,"column":90},"end":{"line":23,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":14},"end":{"line":26,"column":5}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":17},"end":{"line":30,"column":5}},"line":27},"4":{"name":"(anonymous_4)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":41},"end":{"line":34,"column":5}},"line":31},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":4},"end":{"line":35,"column":5}},"loc":{"start":{"line":35,"column":35},"end":{"line":37,"column":5}},"line":35}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":11},"end":{"line":11,"column":48}},"type":"binary-expr","locations":[{"start":{"line":11,"column":11},"end":{"line":11,"column":24}},{"start":{"line":11,"column":29},"end":{"line":11,"column":47}}],"line":11},"1":{"loc":{"start":{"line":25,"column":15},"end":{"line":25,"column":64}},"type":"binary-expr","locations":[{"start":{"line":25,"column":15},"end":{"line":25,"column":42}},{"start":{"line":25,"column":46},"end":{"line":25,"column":64}}],"line":25},"2":{"loc":{"start":{"line":29,"column":15},"end":{"line":29,"column":57}},"type":"binary-expr","locations":[{"start":{"line":29,"column":15},"end":{"line":29,"column":32}},{"start":{"line":29,"column":36},"end":{"line":29,"column":57}}],"line":29},"3":{"loc":{"start":{"line":36,"column":131},"end":{"line":36,"column":160}},"type":"binary-expr","locations":[{"start":{"line":36,"column":131},"end":{"line":36,"column":141}},{"start":{"line":36,"column":145},"end":{"line":36,"column":160}}],"line":36}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":8,"9":8,"10":8,"11":8,"12":8,"13":8,"14":8,"15":0,"16":0,"17":0,"18":1,"19":1,"20":0,"21":1},"f":{"0":1,"1":8,"2":0,"3":0,"4":1,"5":0},"b":{"0":[1,1],"1":[0,0],"2":[0,0],"3":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/types/index.ts","sources":["/Users/flippiescholtz/civic/repos/on-chain-identity-gateway/solana/gateway-ts/src/types/index.ts"],"names":[],"mappings":";;;AACA,8DAA2D;AAC3D,sCAAiD;AAMjD,IAAY,KAIX;AAJD,WAAY,KAAK;IACf,0BAAiB,CAAA;IACjB,4BAAmB,CAAA;IACnB,0BAAiB,CAAA;AACnB,CAAC,EAJW,KAAK,GAAL,aAAK,KAAL,aAAK,QAIhB;AACD,MAAa,YAAY;IACvB;IACE,oDAAoD;IAC3C,iBAA4B,EAC5B,iBAA4B,EAC5B,KAAgB,EAChB,KAAY,EACZ,SAAoB,EACpB,SAAoB,EACpB,UAAmB;QANnB,sBAAiB,GAAjB,iBAAiB,CAAW;QAC5B,sBAAiB,GAAjB,iBAAiB,CAAW;QAC5B,UAAK,GAAL,KAAK,CAAW;QAChB,UAAK,GAAL,KAAK,CAAO;QACZ,cAAS,GAAT,SAAS,CAAW;QACpB,cAAS,GAAT,SAAS,CAAW;QACpB,eAAU,GAAV,UAAU,CAAS;IAC3B,CAAC;IAEJ,OAAO;QACL,OAAO,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;IAC3D,CAAC;IAEO,UAAU;QAChB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAC1C,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;IACpD,CAAC;IAED,MAAM,CAAC,WAAW,CAChB,WAAgC,EAChC,GAAc;QAEd,MAAM,UAAU,GAAG,mCAAgB,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAClE,OAAO,IAAA,yBAAkB,EAAC,UAAU,EAAE,GAAG,CAAC,CAAC;IAC7C,CAAC;IAEM,MAAM,CAAC,EACZ,KAAK,EACL,UAAU,GAIX;QACC,OAAO,IAAI,YAAY,CACrB,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,KAAK,EACV,KAAK,EACL,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,SAAS,EACd,UAAU,IAAI,IAAI,CAAC,UAAU,CAC9B,CAAC;IACJ,CAAC;CACF;AA9CD,oCA8CC","sourcesContent":["import { AccountInfo, PublicKey } from \"@solana/web3.js\";\nimport { GatewayTokenData } from \"../lib/GatewayTokenData\";\nimport { dataToGatewayToken } from \"../lib/util\";\n\nexport declare type DeepPartial<T> = {\n  [P in keyof T]?: DeepPartial<T[P]>;\n};\n\nexport enum State {\n  ACTIVE = \"ACTIVE\",\n  REVOKED = \"REVOKED\",\n  FROZEN = \"FROZEN\",\n}\nexport class GatewayToken {\n  constructor(\n    //  the key used to reference the issuing gatekeeper\n    readonly issuingGatekeeper: PublicKey,\n    readonly gatekeeperNetwork: PublicKey,\n    readonly owner: PublicKey,\n    readonly state: State,\n    readonly publicKey: PublicKey,\n    readonly programId: PublicKey,\n    readonly expiryTime?: number\n  ) {}\n\n  isValid(): boolean {\n    return this.state === State.ACTIVE && !this.hasExpired();\n  }\n\n  private hasExpired(): boolean {\n    const now = Math.floor(Date.now() / 1000);\n    return !!this.expiryTime && now > this.expiryTime;\n  }\n\n  static fromAccount(\n    accountInfo: AccountInfo<Buffer>,\n    key: PublicKey\n  ): GatewayToken {\n    const parsedData = GatewayTokenData.fromAccount(accountInfo.data);\n    return dataToGatewayToken(parsedData, key);\n  }\n\n  public update({\n    state,\n    expiryTime,\n  }: {\n    state: State;\n    expiryTime?: number;\n  }): GatewayToken {\n    return new GatewayToken(\n      this.issuingGatekeeper,\n      this.gatekeeperNetwork,\n      this.owner,\n      state,\n      this.publicKey,\n      this.programId,\n      expiryTime || this.expiryTime\n    );\n  }\n}\n\nexport type ProgramAccountResponse = {\n  pubkey: PublicKey;\n  account: AccountInfo<Buffer>;\n};\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"88dd40d62621ac23df5e910e9bbfe5dc830e3d53","contentHash":"d26d41d969377221bb767e9c1ca6f8339f7d7ec598bfb8b5dc41c40b5149c319"}}